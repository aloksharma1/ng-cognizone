var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ElasticAggregation.html",[0,0.121,1,1.411]],["body/interfaces/ElasticAggregation.html",[0,0.195,1,2.271,2,0.54,3,0.474,4,0.412,5,0.353,6,1.193,7,1.334,8,0.474,9,2.343,10,1.769,11,2.343,12,2.069,13,2.343,14,2.677,15,2.382,16,0.412,17,1.185,18,1.061,19,2.89,20,2.89,21,2.89,22,2.271,23,0.65,24,0.044,25,1.423,26,0.896,27,2.129,28,1.699,29,1.699,30,0.687,31,1.699,32,2.343,33,1.699,34,1.699,35,1.699,36,2.768,37,0.474,38,1.699,39,1.699,40,1.699,41,1.699,42,0.687,43,1.84,44,1.699,45,1.474,46,0.874,47,2.343,48,2.677,49,2.768,50,0.769,51,1.5,52,1.226,53,1.699,54,1.699,55,1.699,56,1.699,57,1.5,58,1.699,59,1.699,60,1.699,61,1.699,62,0.859,63,1.039,64,1.699,65,1.5,66,1.699,67,1.699,68,0.918,69,2.069,70,2.368,71,1.334,72,0.687,73,2.368,74,0.735,75,2.271,76,2.368,77,2.368,78,1.5,79,1.5,80,0.769,81,1.699,82,1.699,83,2.343,84,1.699,85,1.5,86,1.5,87,0.687,88,1.5,89,1.699,90,1.193,91,0.744,92,1.5,93,1.699,94,0.02,95,0.028,96,0.02]],["title/interfaces/ElasticBucket.html",[0,0.121,22,1.411]],["body/interfaces/ElasticBucket.html",[0,0.195,1,2.271,2,0.54,3,0.474,4,0.412,5,0.353,6,1.193,7,1.334,8,0.474,9,1.699,10,1.711,11,1.699,12,1.5,13,1.699,14,2.552,15,2.271,16,0.412,17,1.185,18,1.061,19,1.699,20,1.699,21,1.699,22,2.106,23,0.65,24,0.044,25,1.423,26,0.896,27,2.129,28,1.699,29,1.699,30,0.687,31,1.699,32,2.343,33,1.699,34,1.699,35,1.699,36,2.768,37,0.474,38,1.699,39,1.699,40,1.699,41,1.699,42,0.687,43,1.84,44,1.699,45,1.908,46,0.937,47,2.343,48,2.677,49,2.768,50,0.769,51,1.5,52,1.226,53,1.699,54,1.699,55,1.699,56,1.699,57,1.5,58,1.699,59,1.699,60,1.699,61,2.343,62,1.185,63,1.039,64,1.699,65,1.5,66,2.89,67,2.89,68,0.918,69,2.069,70,2.368,71,1.334,72,0.687,73,2.368,74,0.735,75,2.271,76,2.368,77,2.368,78,1.5,79,1.5,80,0.769,81,1.699,82,1.699,83,2.343,84,1.699,85,1.5,86,1.5,87,0.687,88,1.5,89,1.699,90,1.193,91,0.744,92,1.5,93,1.699,94,0.02,95,0.028,96,0.02]],["title/interfaces/ElasticHit.html",[0,0.121,43,1.411]],["body/interfaces/ElasticHit.html",[0,0.192,1,2.069,2,0.522,3,0.458,4,0.398,5,0.342,6,1.153,7,1.29,8,0.458,9,1.643,10,1.75,11,1.643,12,1.45,13,1.643,14,2.516,15,2.238,16,0.398,17,1.158,18,1.29,19,1.643,20,1.643,21,1.643,22,1.798,23,0.752,24,0.044,25,1.417,26,0.887,27,2.103,28,1.643,29,1.643,30,0.664,31,1.643,32,2.289,33,1.643,34,1.643,35,1.643,36,2.739,37,0.458,38,1.643,39,1.643,40,1.643,41,1.643,42,0.664,43,2.069,44,1.643,45,1.44,46,0.949,47,2.634,48,2.739,49,2.949,50,1.036,51,2.021,52,1.312,53,2.849,54,2.849,55,2.849,56,2.849,57,2.516,58,1.643,59,1.643,60,1.643,61,1.643,62,0.831,63,1.024,64,1.643,65,1.45,66,1.643,67,1.643,68,0.905,69,2.021,70,2.326,71,1.29,72,0.664,73,2.326,74,0.726,75,2.238,76,2.326,77,2.326,78,1.45,79,1.45,80,0.744,81,1.643,82,1.643,83,2.289,84,1.643,85,1.45,86,1.45,87,0.664,88,1.45,89,1.643,90,1.153,91,0.727,92,1.45,93,1.643,94,0.019,95,0.027,96,0.019]],["title/interfaces/ElasticQuery.html",[0,0.121,97,1.796]],["body/interfaces/ElasticQuery.html",[0,0.171,2,0.605,3,0.531,4,0.462,5,0.396,6,1.338,8,0.531,10,1.075,16,0.462,17,1.281,18,1.556,23,0.85,24,0.044,25,1.359,26,0.845,30,1.149,45,1.199,46,0.845,57,2.676,63,0.685,65,2.785,68,0.605,74,0.462,94,0.022,95,0.03,96,0.022,97,3.03,98,2.185,99,3.4,100,0.863,101,0.964,102,3.126,103,2.559,104,3.126,105,2.559,106,2.559,107,1.83,108,3.126,109,3.126,110,3.126,111,5.175,112,4.236,113,4.972,114,3.243,115,4.154,116,1.778,117,4.154,118,3.126,119,3.126,120,2.185,121,4.154,122,4.154,123,4.154,124,4.154,125,3.126,126,3.126,127,3.126,128,3.126,129,3.126,130,3.126,131,3.126,132,3.126,133,3.126,134,3.126,135,3.126,136,3.126,137,3.126,138,3.126,139,2.559,140,2.559,141,2.559,142,2.185]],["title/interfaces/ElasticSearchResponse.html",[0,0.121,27,1.261]],["body/interfaces/ElasticSearchResponse.html",[0,0.193,1,2.071,2,0.523,3,0.459,4,0.399,5,0.342,6,1.155,7,1.292,8,0.459,9,1.645,10,1.751,11,1.645,12,2.023,13,1.645,14,2.517,15,2.239,16,0.399,17,1.159,19,1.645,20,1.645,21,1.645,22,1.8,23,0.818,24,0.044,25,1.404,26,0.888,27,2.179,28,2.851,29,2.851,30,1.066,31,2.851,32,2.291,33,1.645,34,1.645,35,1.645,36,2.95,37,0.459,38,1.645,39,1.645,40,1.645,41,1.645,42,0.665,43,1.8,44,2.851,45,1.441,46,0.865,47,2.291,48,2.74,49,2.812,50,1.037,51,2.023,52,1.255,53,1.645,54,1.645,55,1.645,56,1.645,57,1.452,58,1.645,59,1.645,60,1.645,61,1.645,62,0.832,63,1.024,64,1.645,65,1.452,66,1.645,67,1.645,68,0.906,69,2.023,70,2.328,71,1.292,72,0.665,73,2.328,74,0.726,75,2.239,76,2.328,77,2.328,78,1.452,79,1.452,80,0.745,81,1.645,82,1.645,83,2.291,84,1.645,85,1.452,86,1.452,87,0.665,88,1.452,89,1.645,90,1.155,91,0.728,92,1.452,93,1.645,94,0.019,95,0.027,96,0.019,105,2.209,106,2.209,114,3.104,143,2.699]],["title/interfaces/GetSelectOptionsParams.html",[0,0.121,144,1.13]],["body/interfaces/GetSelectOptionsParams.html",[0,0.197,2,0.391,3,0.343,4,0.298,5,0.256,16,0.298,17,0.939,18,1.127,23,0.603,24,0.044,25,0.75,26,0.885,30,0.75,37,0.836,42,0.497,46,0.694,50,0.557,52,1.134,62,0.623,63,1.008,68,1.009,72,1.079,74,0.647,80,0.84,87,0.903,91,0.71,94,0.014,95,0.022,96,0.014,100,0.557,101,0.623,107,1.404,116,0.864,144,1.565,145,0.694,146,0.694,147,2.097,148,1.506,149,1.607,150,1.404,151,0.967,152,1.833,153,0.694,154,0.967,155,0.967,156,0.967,157,1.458,158,0.967,159,0.75,160,0.84,161,0.774,162,0.864,163,0.967,164,0.967,165,1.506,166,0.967,167,1.303,168,0.967,169,1.458,170,1.97,171,0.967,172,0.967,173,0.864,174,0.967,175,1.755,176,0.967,177,0.967,178,0.967,179,1.721,180,0.967,181,1.303,182,0.774,183,1.351,184,0.967,185,0.864,186,1.569,187,0.967,188,1.755,189,1.458,190,1.303,191,1.458,192,0.967,193,0.967,194,0.694,195,0.967,196,1.458,197,0.967,198,0.864,199,0.967,200,0.967,201,0.774,202,0.774,203,0.864,204,0.864,205,0.864,206,0.967,207,0.864,208,0.864,209,0.774,210,1.303,211,0.864,212,1.584,213,0.967,214,0.967,215,0.967,216,0.967,217,0.967,218,0.967,219,0.967,220,0.967,221,0.967,222,0.967,223,0.967,224,0.967,225,0.967,226,0.967,227,1.833,228,0.967,229,1.458,230,1.755,231,1.731,232,0.694,233,1.458,234,0.694,235,1.458,236,0.774,237,1.458,238,0.967,239,0.623,240,0.967,241,0.967,242,0.967,243,0.967,244,0.623,245,0.774,246,0.967,247,0.967,248,0.967,249,1.406,250,0.967,251,0.967,252,0.967,253,0.967,254,0.967,255,1.458,256,0.967,257,1.458,258,1.458,259,0.967,260,1.458,261,0.967,262,0.967,263,0.967,264,0.967,265,0.967,266,0.967,267,0.694,268,1.755,269,0.864,270,0.967,271,1.874,272,0.967,273,0.774,274,0.864,275,1.458,276,0.967,277,0.967,278,0.967,279,0.864,280,1.458,281,1.954,282,0.939,283,0.967,284,0.967,285,0.967,286,0.967,287,0.864,288,1.303]],["title/interfaces/LangString.html",[0,0.121,159,0.726]],["body/interfaces/LangString.html",[0,0.168,2,0.587,3,0.515,4,0.448,5,0.384,8,0.515,10,1.399,24,0.043,26,0.78,37,0.78,45,1.56,46,0.974,63,0.891,68,0.889,74,0.448,75,2.199,90,1.966,91,0.587,94,0.022,95,0.029,96,0.022,101,0.934,148,1.959,149,1.416,150,1.399,159,1.327,160,0.836,182,1.162,183,1.743,194,1.58,201,1.56,212,1.689,232,1.042,236,1.162,239,1.416,249,1.162,267,1.399,282,1.416,289,2.48,290,1.847,291,3.33,292,4.192,293,2.843,294,3.33,295,3.33,296,3.33,297,3.33,298,3.33,299,3.759,300,3.33,301,2.843,302,3.33,303,3.33,304,3.33,305,3.431,306,2.118,307,1.451,308,3.03,309,1.847,310,1.847,311,1.847,312,2.48,313,2.48,314,3.21,315,2.118,316,3.21,317,2.843,318,2.118,319,2.118,320,2.118,321,2.118,322,2.118,323,2.118,324,2.118,325,3.21,326,2.118,327,2.118,328,1.847,329,3.33,330,2.48,331,3.33,332,2.48,333,2.48]],["title/interfaces/LangStringSimple.html",[0,0.121,160,0.814]],["body/interfaces/LangStringSimple.html",[0,0.17,2,0.602,3,0.529,4,0.459,5,0.394,8,0.529,10,1.07,24,0.043,26,0.791,37,0.791,45,1.193,46,0.972,63,0.907,68,0.901,74,0.459,75,2.228,90,1.992,91,0.602,94,0.022,95,0.03,96,0.022,101,0.959,148,1.966,149,1.435,150,1.424,159,1.336,160,1.143,182,1.588,183,1.737,194,1.424,201,1.193,212,1.706,232,1.07,236,1.588,239,1.277,249,1.588,267,1.07,282,1.435,289,2.524,290,1.896,291,2.546,292,4.061,293,2.174,294,2.546,295,2.546,296,2.546,297,2.546,298,2.546,299,3.389,300,2.546,301,2.174,302,2.546,303,2.546,304,2.546,305,3.252,306,2.174,307,1.489,309,1.896,310,1.896,311,2.524,312,3.389,313,3.389,314,3.252,315,2.174,316,3.252,317,2.894,318,2.174,319,2.174,320,2.174,321,2.174,322,2.174,323,2.174,324,2.174,325,3.252,326,2.174,327,2.174,328,1.896,329,3.389,330,2.546,331,3.389,332,2.546,333,2.546,334,3.111]],["title/interfaces/Pagination.html",[0,0.121,335,2.06]],["body/interfaces/Pagination.html",[0,0.2,2,0.774,3,0.68,4,0.591,5,0.507,8,0.68,10,1.376,16,0.773,17,1.498,23,0.773,24,0.043,25,1.414,26,0.68,91,0.941,94,0.029,95,0.035,96,0.029,100,1.104,107,1.376,112,4.642,162,1.712,273,1.534,335,3.899,336,3.273,337,3.273,338,4,339,2.795,340,4,341,4,342,4,343,3.273,344,4,345,5.579,346,4.859,347,4.859]],["title/interfaces/SelectOption.html",[0,0.121,179,0.909]],["body/interfaces/SelectOption.html",[0,0.192,2,0.365,3,0.32,4,0.278,5,0.239,8,0.32,16,0.278,17,0.891,18,1.088,23,0.729,24,0.044,25,0.712,26,0.871,30,0.971,37,0.884,42,0.464,46,0.669,50,0.798,52,1.186,62,0.581,63,0.982,68,0.992,72,1.105,74,0.628,80,1.237,87,0.866,91,0.68,94,0.014,95,0.021,96,0.014,100,0.52,101,0.581,107,1.355,114,1.761,116,0.807,144,1.348,145,0.648,146,0.648,147,1.384,148,0.994,149,1.439,150,1.355,151,0.903,152,1.79,153,0.648,154,0.903,155,0.903,156,0.903,157,1.384,158,0.903,159,0.712,160,0.798,161,0.723,162,1.237,163,1.384,164,1.384,165,1.605,166,1.384,167,1.504,168,1.384,169,1.887,170,2.061,171,1.384,172,1.384,173,1.237,174,1.384,175,1.887,176,1.384,177,1.384,178,1.384,179,1.721,180,1.384,181,1.686,182,1.108,183,1.522,184,1.384,185,1.237,186,1.818,187,1.384,188,1.887,189,2.147,190,1.504,191,1.683,192,1.384,193,1.384,194,0.994,195,1.384,196,1.887,197,1.384,198,1.237,199,1.384,200,1.384,201,1.108,202,0.723,203,0.807,204,0.807,205,0.807,206,0.903,207,0.807,208,0.807,209,0.723,210,1.237,211,0.807,212,1.542,213,0.903,214,0.903,215,0.903,216,0.903,217,0.903,218,0.903,219,0.903,220,0.903,221,0.903,222,0.903,223,0.903,224,0.903,225,0.903,226,0.903,227,1.79,228,0.903,229,1.384,230,1.683,231,1.698,232,0.648,233,1.384,234,0.648,235,1.384,236,0.723,237,1.384,238,0.903,239,0.581,240,0.903,241,0.903,242,0.903,243,0.903,244,0.581,245,0.723,246,0.903,247,0.903,248,0.903,249,1.348,250,0.903,251,0.903,252,0.903,253,0.903,254,0.903,255,1.384,256,0.903,257,1.384,258,1.384,259,0.903,260,1.384,261,0.903,262,0.903,263,0.903,264,0.903,265,0.903,266,0.903,267,0.648,268,1.683,269,0.807,270,0.903,271,1.818,272,0.903,273,0.723,274,0.807,275,1.384,276,0.903,277,0.903,278,0.903,279,0.807,280,1.384,281,1.887,282,0.891,283,0.903,284,0.903,285,0.903,286,0.903,287,0.807,288,1.237]],["title/interfaces/SelectOptionCounts.html",[0,0.121,202,1.13]],["body/interfaces/SelectOptionCounts.html",[0,0.203,2,0.393,3,0.345,4,0.3,5,0.258,8,0.345,23,0.452,24,0.044,25,0.907,26,0.887,30,0.754,37,0.857,42,0.501,46,0.746,50,0.561,52,1.137,62,0.627,63,1.011,68,1.01,72,1.082,74,0.649,80,0.845,87,0.907,91,0.713,94,0.015,95,0.022,96,0.015,100,0.845,101,0.627,107,1.408,116,0.87,144,1.411,145,1.052,146,0.699,147,1.762,148,1.052,149,1.477,150,1.408,151,0.973,152,1.837,153,0.699,154,0.973,155,0.973,156,0.973,157,1.465,158,0.973,159,0.754,160,0.845,161,0.779,162,0.87,163,0.973,164,0.973,165,1.587,166,0.973,167,1.309,168,0.973,169,1.465,170,1.975,171,0.973,172,0.973,173,0.87,174,0.973,175,1.961,176,0.973,177,0.973,178,0.973,179,1.731,180,0.973,181,1.309,182,0.779,183,1.354,184,0.973,185,0.87,186,1.575,187,0.973,188,1.762,189,1.465,190,1.309,191,1.762,192,0.973,193,0.973,194,0.699,195,0.973,196,1.465,197,0.973,198,0.87,199,0.973,200,0.973,201,0.779,202,1.173,203,0.87,204,0.87,205,0.87,206,0.973,207,0.87,208,0.87,209,0.779,210,1.309,211,0.87,212,1.587,213,0.973,214,0.973,215,0.973,216,0.973,217,0.973,218,0.973,219,0.973,220,0.973,221,0.973,222,0.973,223,0.973,224,0.973,225,0.973,226,0.973,227,1.837,228,0.973,229,1.465,230,1.762,231,1.734,232,0.699,233,1.465,234,0.699,235,1.465,236,0.779,237,1.465,238,0.973,239,0.627,240,0.973,241,0.973,242,0.973,243,0.973,244,0.627,245,0.779,246,0.973,247,0.973,248,0.973,249,1.411,250,0.973,251,0.973,252,0.973,253,0.973,254,0.973,255,1.465,256,0.973,257,1.465,258,1.465,259,0.973,260,1.465,261,0.973,262,0.973,263,0.973,264,0.973,265,0.973,266,0.973,267,0.699,268,1.762,269,0.87,270,0.973,271,1.88,272,0.973,273,0.779,274,0.87,275,1.465,276,0.973,277,0.973,278,0.973,279,0.87,280,1.465,281,1.961,282,0.943,283,0.973,284,0.973,285,0.973,286,0.973,287,0.87,288,1.309,306,1.42,307,0.973,348,2.032]],["title/interfaces/SelectOptionGroup.html",[0,0.121,231,1.014]],["body/interfaces/SelectOptionGroup.html",[0,0.196,2,0.386,3,0.338,4,0.294,5,0.252,8,0.338,16,0.294,17,0.929,18,0.832,23,0.599,24,0.044,25,0.742,26,0.883,30,0.742,37,0.832,42,0.491,46,0.689,50,0.55,52,1.128,62,0.929,63,1.003,68,1.006,72,1.073,74,0.643,80,0.832,87,0.896,91,0.704,94,0.014,95,0.022,96,0.014,100,0.55,101,0.614,107,1.394,116,0.852,144,1.394,145,0.685,146,0.685,147,1.443,148,1.036,149,1.467,150,1.394,151,0.953,152,1.824,153,0.685,154,0.953,155,0.953,156,0.953,157,1.443,158,0.953,159,0.742,160,0.832,161,0.764,162,0.852,163,0.953,164,0.953,165,1.497,166,0.953,167,1.289,168,0.953,169,1.443,170,1.96,171,0.953,172,0.953,173,0.852,174,0.953,175,1.74,176,0.953,177,0.953,178,0.953,179,1.742,180,0.953,181,1.289,182,0.764,183,1.546,184,0.953,185,0.852,186,1.863,187,0.953,188,1.74,189,1.443,190,1.555,191,1.443,192,0.953,193,0.953,194,0.685,195,0.953,196,1.443,197,0.953,198,0.852,199,0.953,200,0.953,201,0.764,202,0.764,203,0.852,204,0.852,205,0.852,206,0.953,207,0.852,208,0.852,209,0.764,210,1.289,211,0.852,212,1.575,213,0.953,214,0.953,215,0.953,216,0.953,217,0.953,218,0.953,219,0.953,220,0.953,221,0.953,222,0.953,223,0.953,224,0.953,225,0.953,226,0.953,227,1.824,228,0.953,229,1.443,230,1.74,231,1.758,232,0.685,233,1.443,234,0.685,235,1.443,236,0.764,237,1.443,238,0.953,239,0.614,240,0.953,241,0.953,242,0.953,243,0.953,244,0.614,245,0.764,246,0.953,247,0.953,248,0.953,249,1.394,250,0.953,251,0.953,252,0.953,253,0.953,254,0.953,255,1.443,256,0.953,257,1.443,258,1.443,259,0.953,260,1.443,261,0.953,262,0.953,263,0.953,264,0.953,265,0.953,266,0.953,267,1.036,268,2.193,269,1.289,270,1.443,271,2.188,272,1.443,273,1.155,274,0.852,275,1.443,276,0.953,277,0.953,278,0.953,279,0.852,280,1.443,281,1.941,282,0.929,283,0.953,284,0.953,285,0.953,286,0.953,287,0.852,288,1.289]],["title/interfaces/SelectOptionsProvider.html",[0,0.121,227,1.13]],["body/interfaces/SelectOptionsProvider.html",[0,0.198,2,0.365,3,0.32,4,0.278,5,0.239,8,0.32,16,0.278,18,0.97,23,0.628,24,0.044,25,0.712,26,0.871,30,0.712,37,0.895,42,0.464,46,0.669,50,0.52,52,1.241,62,0.581,63,0.982,68,1.019,72,1.186,74,0.628,80,0.798,87,1.047,91,0.68,94,0.014,95,0.021,96,0.014,100,0.52,101,0.581,107,1.542,116,0.807,144,1.629,145,1.355,146,0.648,147,1.384,148,0.994,149,1.522,150,1.355,151,0.903,152,1.932,153,0.648,154,0.903,155,0.903,156,0.903,157,1.384,158,0.903,159,0.712,160,0.798,161,0.723,162,0.807,163,0.903,164,0.903,165,1.461,166,0.903,167,1.237,168,0.903,169,1.384,170,1.919,171,0.903,172,0.903,173,0.807,174,0.903,175,1.887,176,0.903,177,0.903,178,0.903,179,1.736,180,0.903,181,1.237,182,0.723,183,1.31,184,0.903,185,0.807,186,1.504,187,0.903,188,1.887,189,1.384,190,1.237,191,1.384,192,0.903,193,0.903,194,0.648,195,0.903,196,1.384,197,0.903,198,0.807,199,0.903,200,0.903,201,0.723,202,0.723,203,0.807,204,0.807,205,0.807,206,0.903,207,0.807,208,0.807,209,0.723,210,1.504,211,0.807,212,1.542,213,0.903,214,0.903,215,0.903,216,0.903,217,0.903,218,0.903,219,0.903,220,0.903,221,0.903,222,0.903,223,1.384,224,1.384,225,1.384,226,1.384,227,1.846,228,1.384,229,1.683,230,2.034,231,1.698,232,0.994,233,1.683,234,1.461,235,1.683,236,1.108,237,1.683,238,0.903,239,0.581,240,0.903,241,0.903,242,0.903,243,0.903,244,0.581,245,0.723,246,0.903,247,0.903,248,0.903,249,1.348,250,0.903,251,0.903,252,0.903,253,0.903,254,0.903,255,1.384,256,0.903,257,1.384,258,1.384,259,0.903,260,1.384,261,0.903,262,0.903,263,0.903,264,0.903,265,0.903,266,0.903,267,0.648,268,1.683,269,0.807,270,0.903,271,1.818,272,0.903,273,0.723,274,0.807,275,1.384,276,0.903,277,0.903,278,0.903,279,0.807,280,1.384,281,1.887,282,0.891,283,0.903,284,0.903,285,0.903,286,0.903,287,0.807,288,1.237,307,1.683,349,2.02,350,2.365,351,2.365,352,2.365,353,1.885,354,2.142,355,2.142,356,1.885,357,1.885]],["title/classes/SelectOptionsProvidersMerger.html",[244,0.909,245,1.13]],["body/classes/SelectOptionsProvidersMerger.html",[0,0.192,3,0.32,4,0.278,5,0.239,8,0.32,16,0.278,18,1.088,23,0.662,24,0.044,25,0.712,26,0.871,30,0.712,37,0.856,42,0.464,46,0.669,50,0.52,52,1.241,62,0.581,63,0.982,68,0.992,72,1.047,74,0.628,80,0.798,87,0.866,91,0.68,94,0.014,95,0.021,96,0.014,100,0.52,101,0.891,107,1.461,116,0.807,144,1.629,145,1.461,146,0.648,147,1.384,148,0.994,149,1.522,150,1.355,151,0.903,152,1.932,153,0.648,154,0.903,155,0.903,156,0.903,157,1.384,158,0.903,159,0.712,160,0.798,161,0.723,162,0.807,163,0.903,164,0.903,165,1.461,166,0.903,167,1.237,168,0.903,169,1.384,170,1.919,171,0.903,172,0.903,173,0.807,174,0.903,175,1.683,176,0.903,177,0.903,178,0.903,179,1.704,180,0.903,181,1.237,182,0.723,183,1.31,184,0.903,185,0.807,186,1.504,187,0.903,188,1.683,189,1.384,190,1.237,191,1.384,192,0.903,193,0.903,194,0.648,195,0.903,196,1.384,197,0.903,198,0.807,199,0.903,200,0.903,201,0.723,202,0.723,203,0.807,204,0.807,205,0.807,206,0.903,207,0.807,208,0.807,209,0.723,210,1.237,211,0.807,212,1.542,213,0.903,214,0.903,215,0.903,216,0.903,217,0.903,218,0.903,219,0.903,220,0.903,221,0.903,222,0.903,223,0.903,224,0.903,225,0.903,226,0.903,227,2.041,228,0.903,229,1.683,230,2.034,231,1.698,232,0.648,233,1.683,234,1.355,235,1.384,236,0.723,237,1.683,238,1.384,239,0.891,240,1.384,241,1.384,242,1.384,243,0.903,244,0.581,245,1.108,246,1.384,247,0.903,248,1.384,249,1.719,250,0.903,251,0.903,252,0.903,253,0.903,254,0.903,255,1.384,256,0.903,257,1.384,258,1.384,259,0.903,260,1.384,261,0.903,262,0.903,263,0.903,264,0.903,265,0.903,266,0.903,267,0.648,268,1.683,269,0.807,270,0.903,271,1.818,272,0.903,273,0.723,274,0.807,275,1.384,276,0.903,277,0.903,278,0.903,279,0.807,280,1.384,281,1.887,282,0.891,283,0.903,284,0.903,285,0.903,286,0.903,287,0.807,288,1.237,307,1.887,349,2.02,350,2.365,351,2.365,352,2.365,354,2.402,355,2.402,358,1.317,359,1.885,360,1.885,361,1.885,362,1.885,363,1.885,364,1.885]],["title/classes/SubSink.html",[244,0.909,365,2.06]],["body/classes/SubSink.html",[3,0.574,4,0.499,5,0.428,8,0.574,12,2.353,15,2.093,16,0.499,18,0.933,23,0.499,24,0.043,26,0.574,37,0.574,94,0.024,95,0.031,96,0.024,150,1.162,153,1.667,165,1.504,181,1.446,234,1.504,239,1.348,244,1.494,269,1.871,307,2.093,349,3.055,354,2.06,355,2.06,358,2.362,365,3.055,366,3.967,367,2.766,368,4.372,369,4.372,370,5.755,371,4.372,372,4.372,373,5.124,374,4.372,375,5.124,376,3.38,377,4.372,378,4.372,379,5.307,380,4.372,381,4.372,382,5.124,383,3.967,384,3.38,385,3.38,386,4.372,387,4.372,388,4.372,389,5.124,390,4.372,391,4.372,392,4.372,393,4.372,394,4.372,395,4.372,396,3.38,397,3.38,398,3.38,399,3.38,400,3.38,401,3.38]],["title/changelog.html",[402,2.026,403,2.026,404,2.026]],["body/changelog.html",[5,0.581,24,0.038,71,2.196,94,0.033,95,0.038,96,0.033,404,3.754,405,3.754,406,4.587,407,4.587,408,4.587,409,4.587,410,4.587]],["title/coverage.html",[411,3.268]],["body/coverage.html",[0,0.233,1,1.329,5,0.352,6,2.33,7,2.52,22,1.329,23,0.41,24,0.043,27,1.187,43,1.329,74,0.868,94,0.02,95,0.028,96,0.02,97,1.691,98,2.678,142,1.939,144,1.064,145,1.914,146,1.914,159,0.684,160,0.766,161,1.064,179,0.856,202,1.064,227,1.064,231,0.954,244,1.181,245,1.064,289,2.675,290,2.885,309,1.691,328,1.691,335,1.939,336,2.271,365,1.939,366,2.271,367,2.271,411,2.271,412,2.775,413,2.775,414,2.775,415,2.675,416,2.271,417,5.938,418,5.888,419,1.939,420,2.775,421,2.271,422,1.939,423,1.939,424,2.271,425,3.832,426,3.832,427,3.832,428,3.832,429,2.775,430,2.775,431,2.271,432,2.271,433,2.271,434,2.678,435,2.271,436,1.939,437,3.832,438,2.775,439,2.775,440,4.733,441,2.775,442,2.775,443,2.775,444,2.271,445,4.389,446,2.271,447,2.271,448,2.271,449,2.271,450,2.775,451,2.271,452,2.271,453,2.271,454,2.271,455,2.271,456,2.271,457,2.271,458,2.271,459,2.271,460,2.271,461,2.271,462,2.271,463,2.271,464,2.271,465,2.271,466,2.271,467,2.271,468,2.271,469,2.271,470,2.271,471,2.271,472,2.775,473,2.775,474,2.775]],["title/dependencies.html",[475,2.476,476,2.895]],["body/dependencies.html",[24,0.041,94,0.033,95,0.038,96,0.033,153,1.566,476,4.294,477,4.553,478,4.553,479,4.553,480,4.553,481,4.553,482,4.553]],["title/miscellaneous/functions.html",[483,1.185,484,2.895]],["body/miscellaneous/functions.html",[4,0.282,6,1.247,7,1.898,8,0.765,10,1.217,14,1.905,15,1.694,16,0.43,17,0.588,18,1.543,23,0.282,24,0.043,27,0.816,30,0.47,36,1.569,37,0.673,42,0.718,45,1.118,46,0.821,48,1.905,49,1.905,51,1.026,52,1.052,68,0.564,69,2.133,70,1.905,71,0.913,72,1.109,73,1.905,74,0.43,76,1.905,77,1.905,78,1.026,79,1.026,80,0.526,85,1.026,86,1.026,87,1.052,88,1.026,90,1.696,91,0.767,92,1.026,94,0.014,95,0.021,96,0.014,97,1.777,98,2.037,100,0.526,101,0.588,107,1.217,120,1.332,139,1.56,140,1.56,141,1.56,142,2.473,145,0.656,146,1.549,148,1.611,149,0.588,152,1.637,153,1.217,159,0.718,161,1.118,165,1.549,167,0.816,170,1.696,173,1.514,179,1.091,183,1.49,185,0.816,190,0.816,194,0.656,203,0.816,204,0.816,205,0.816,207,0.816,208,0.816,209,0.731,210,0.816,211,0.816,212,0.656,231,0.656,232,0.656,234,1.946,239,0.588,271,1.247,273,1.118,274,0.816,279,0.816,282,1.317,287,0.816,288,1.696,289,1.162,290,2.416,305,2.037,309,1.777,310,1.777,311,1.777,314,2.473,315,1.332,316,2.473,317,2.037,318,1.332,319,1.332,320,2.037,321,2.037,322,1.332,323,1.332,324,1.332,325,2.77,326,1.332,327,1.332,328,2.157,339,1.332,343,1.56,354,3.408,355,3.408,383,1.56,415,1.162,416,2.385,419,2.037,422,1.332,423,2.037,424,2.385,431,2.385,432,2.385,433,2.385,434,1.332,435,2.385,436,1.332,444,2.385,446,2.385,447,2.385,448,2.385,449,2.385,451,1.56,452,2.385,453,2.896,454,1.56,455,2.385,456,2.385,457,1.56,458,2.385,459,2.385,460,1.56,461,2.896,462,2.385,463,1.56,464,2.385,465,2.385,466,1.56,467,2.385,468,2.385,469,1.56,470,2.385,471,2.385,483,0.913,484,1.56,485,2.037,486,3.963,487,1.56,488,1.906,489,1.906,490,1.906,491,1.906,492,3.685,493,1.906,494,2.385,495,1.56,496,1.906,497,1.906,498,1.906,499,3.963,500,3.244,501,3.244,502,1.906,503,3.244,504,1.906,505,1.906,506,1.906,507,1.906,508,1.906,509,1.906,510,1.906,511,1.906,512,1.906,513,2.915,514,1.906,515,1.906,516,1.906,517,1.906,518,1.906,519,2.915,520,1.906,521,2.915,522,1.906,523,1.906,524,1.906,525,1.906,526,1.906,527,1.906,528,1.906,529,1.906,530,1.906,531,1.906,532,1.906,533,1.906,534,1.906,535,1.906,536,1.906,537,1.906,538,1.906,539,1.906,540,2.915,541,1.906,542,1.906,543,2.915,544,1.906,545,1.906,546,1.906,547,1.906,548,1.906,549,1.906,550,1.56,551,1.906,552,1.906,553,1.906,554,2.915,555,3.539,556,1.906,557,1.906,558,1.906,559,1.906,560,1.906,561,1.906,562,1.906,563,1.906,564,1.906,565,1.906,566,1.906,567,2.915,568,1.906,569,1.906,570,1.906,571,1.906,572,1.906,573,1.906,574,1.906,575,1.906,576,1.906,577,1.906,578,1.906,579,1.906,580,1.906,581,1.906,582,1.906,583,1.906,584,1.906,585,1.906]],["title/index.html",[16,0.366,402,2.026,403,2.026]],["body/index.html",[24,0.037,94,0.032,95,0.037,96,0.032,198,1.93,405,3.691,586,5.217,587,5.217,588,5.217,589,4.509,590,5.217,591,5.217,592,4.509,593,4.509,594,4.509]],["title/modules.html",[595,3.268]],["body/modules.html",[24,0.038,94,0.034,95,0.038,96,0.034,595,3.829]],["title/overview.html",[596,3.268]],["body/overview.html",[2,0.897,24,0.038,94,0.033,95,0.038,96,0.033,358,3.237,596,3.791,597,4.632,598,4.632]],["title/miscellaneous/typealiases.html",[483,1.185,599,3.537]],["body/miscellaneous/typealiases.html",[16,0.535,23,0.847,24,0.042,42,1.126,46,0.851,50,0.999,52,1.295,72,1.126,74,0.675,87,0.892,94,0.026,95,0.033,96,0.026,100,0.999,114,2.207,120,2.531,145,1.245,146,1.571,149,1.409,152,1.92,159,1.126,160,1.261,165,1.245,179,1.117,183,1.117,186,1.955,209,1.389,234,1.245,267,1.245,282,1.409,293,2.531,301,2.531,310,2.785,311,2.207,337,2.964,339,2.531,415,2.207,422,2.531,423,3.193,434,2.531,436,2.531,483,1.734,485,2.531,487,2.964,492,2.964,494,2.964,495,2.964,500,4.303,501,2.964,503,3.74,550,2.964,600,3.621,601,4.569,602,3.621,603,4.569,604,4.569,605,4.569,606,3.621,607,4.569,608,3.621,609,3.621,610,3.621,611,3.621,612,3.621,613,3.621,614,3.621,615,3.621,616,3.621,617,3.621,618,3.621,619,5.006,620,3.621,621,3.621,622,3.621,623,3.621,624,3.621]],["title/miscellaneous/variables.html",[483,1.185,625,2.895]],["body/miscellaneous/variables.html",[16,0.663,24,0.039,37,0.763,94,0.032,95,0.037,96,0.032,99,3.673,100,1.436,103,4.258,415,2.735,419,3.84,421,4.258,483,2.149,485,3.136,625,3.673,626,4.488]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":407,"title":{},"body":{"changelog.html":{}}}],["0/1",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["07",{"_index":409,"title":{},"body":{"changelog.html":{}}}],["0th",{"_index":320,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["1/1",{"_index":418,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":417,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":410,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":598,"title":{},"body":{"overview.html":{}}}],["14",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":597,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":408,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["3.7.0",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["6.5.0",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":143,"title":{},"body":{"interfaces/ElasticSearchResponse.html":{}}}],["80",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["_first",{"_index":130,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["_id",{"_index":55,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["_index",{"_index":53,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["_last",{"_index":131,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["_score",{"_index":56,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["_search",{"_index":14,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["_shards",{"_index":31,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["_source",{"_index":49,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["_type",{"_index":54,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["absolute",{"_index":346,"title":{},"body":{"interfaces/Pagination.html":{}}}],["acc",{"_index":256,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["accessors",{"_index":374,"title":{},"body":{"classes/SubSink.html":{}}}],["add",{"_index":375,"title":{},"body":{"classes/SubSink.html":{}}}],["add(value",{"_index":397,"title":{},"body":{"classes/SubSink.html":{}}}],["added",{"_index":378,"title":{},"body":{"classes/SubSink.html":{}}}],["aggregate",{"_index":85,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["aggregation",{"_index":11,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["aggregationquery",{"_index":121,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["aggregations",{"_index":44,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["aggs",{"_index":111,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["aims",{"_index":104,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["aliases",{"_index":600,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allgroups",{"_index":280,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["allgroups.push(lastdynamicgroup",{"_index":284,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["allgroups.push(option",{"_index":286,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["alllabels",{"_index":215,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["alllabels.push(...labels",{"_index":220,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["alllabels.push(option.label",{"_index":218,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["alllabels.some(label",{"_index":221,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["alllangs",{"_index":329,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["alloptions",{"_index":275,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["alloptions.push(...option.options",{"_index":278,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["alloptions.push(option",{"_index":277,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["alloptions.reduce((acc",{"_index":254,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["already",{"_index":507,"title":{},"body":{"miscellaneous/functions.html":{}}}],["always",{"_index":59,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["anyobject",{"_index":601,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["applicable",{"_index":547,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applyting",{"_index":575,"title":{},"body":{"miscellaneous/functions.html":{}}}],["argument",{"_index":550,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["array",{"_index":87,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["array::sort",{"_index":624,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["asc",{"_index":127,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["associated",{"_index":180,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["augmented",{"_index":163,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["autocomplete",{"_index":171,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["avg",{"_index":134,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["avoid",{"_index":392,"title":{},"body":{"classes/SubSink.html":{}}}],["awaitforcompletable",{"_index":421,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["b",{"_index":565,"title":{},"body":{"miscellaneous/functions.html":{}}}],["b'].filter(notnil",{"_index":557,"title":{},"body":{"miscellaneous/functions.html":{}}}],["base",{"_index":545,"title":{},"body":{"miscellaneous/functions.html":{}}}],["based",{"_index":344,"title":{},"body":{"interfaces/Pagination.html":{}}}],["basic",{"_index":140,"title":{},"body":{"interfaces/ElasticQuery.html":{},"miscellaneous/functions.html":{}}}],["basically",{"_index":551,"title":{},"body":{"miscellaneous/functions.html":{}}}],["being",{"_index":50,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/typealiases.html":{}}}],["better",{"_index":340,"title":{},"body":{"interfaces/Pagination.html":{}}}],["beware",{"_index":539,"title":{},"body":{"miscellaneous/functions.html":{}}}],["blob",{"_index":523,"title":{},"body":{"miscellaneous/functions.html":{}}}],["blob.ts",{"_index":464,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["bool",{"_index":115,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["boolean",{"_index":30,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["browser",{"_index":521,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bucket",{"_index":61,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["buckets",{"_index":19,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["c",{"_index":566,"title":{},"body":{"miscellaneous/functions.html":{}}}],["c']).pipe(orelse('b')).subscribe(console.log",{"_index":563,"title":{},"body":{"miscellaneous/functions.html":{}}}],["call",{"_index":15,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"classes/SubSink.html":{},"miscellaneous/functions.html":{}}}],["calls",{"_index":386,"title":{},"body":{"classes/SubSink.html":{}}}],["case",{"_index":167,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["chain",{"_index":532,"title":{},"body":{"miscellaneous/functions.html":{}}}],["changelog",{"_index":404,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["check",{"_index":208,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["checking",{"_index":549,"title":{},"body":{"miscellaneous/functions.html":{}}}],["class",{"_index":244,"title":{"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{}},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"coverage.html":{}}}],["classes",{"_index":358,"title":{},"body":{"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"overview.html":{}}}],["cognizone/elastic",{"_index":102,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["combinelatest",{"_index":151,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["combinelatest(obs).pipe(map(alloptions",{"_index":253,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["compatible",{"_index":525,"title":{},"body":{"miscellaneous/functions.html":{}}}],["completable",{"_index":500,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["completabletoobservable",{"_index":416,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["completabletoobservable(resource",{"_index":498,"title":{},"body":{"miscellaneous/functions.html":{}}}],["completabletopromise",{"_index":419,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["completabletopromise(resource",{"_index":502,"title":{},"body":{"miscellaneous/functions.html":{}}}],["complete",{"_index":611,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["complex",{"_index":303,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["consistency",{"_index":175,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["const",{"_index":212,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["constructor",{"_index":359,"title":{},"body":{"classes/SelectOptionsProvidersMerger.html":{}}}],["constructor(private",{"_index":247,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["constructor(providers",{"_index":360,"title":{},"body":{"classes/SelectOptionsProvidersMerger.html":{}}}],["content",{"_index":9,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["convert",{"_index":499,"title":{},"body":{"miscellaneous/functions.html":{}}}],["corersponding",{"_index":298,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["corresponding",{"_index":232,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["counts",{"_index":147,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["coverage",{"_index":411,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":139,"title":{},"body":{"interfaces/ElasticQuery.html":{},"miscellaneous/functions.html":{}}}],["createelasticquery",{"_index":142,"title":{},"body":{"interfaces/ElasticQuery.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["cross",{"_index":524,"title":{},"body":{"miscellaneous/functions.html":{}}}],["curr",{"_index":255,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["czlabel",{"_index":604,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["czlabeltostring",{"_index":424,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["czlabeltostring(label",{"_index":506,"title":{},"body":{"miscellaneous/functions.html":{}}}],["data",{"_index":80,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["date",{"_index":461,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["datetodatestring",{"_index":462,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["datetodatestring(value",{"_index":508,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dd",{"_index":511,"title":{},"body":{"miscellaneous/functions.html":{}}}],["debouncesync",{"_index":453,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["debouncing",{"_index":514,"title":{},"body":{"miscellaneous/functions.html":{}}}],["debugging",{"_index":533,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaulting",{"_index":560,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defined",{"_index":307,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{}}}],["dependencies",{"_index":476,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deprecated",{"_index":99,"title":{},"body":{"interfaces/ElasticQuery.html":{},"miscellaneous/variables.html":{}}}],["deprectated",{"_index":243,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["desc",{"_index":128,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["describe",{"_index":105,"title":{},"body":{"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["describes",{"_index":623,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"miscellaneous/functions.html":{}}}],["dictionary",{"_index":605,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["digging",{"_index":535,"title":{},"body":{"miscellaneous/functions.html":{}}}],["directly",{"_index":613,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["disabled",{"_index":189,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["display",{"_index":192,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["distinctuntilchanged",{"_index":576,"title":{},"body":{"miscellaneous/functions.html":{}}}],["doc_count",{"_index":67,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["doc_count_error_upper_bound",{"_index":20,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["documentation",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":12,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"classes/SubSink.html":{}}}],["download",{"_index":522,"title":{},"body":{"miscellaneous/functions.html":{}}}],["downloadblob",{"_index":465,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["downloadblob(data",{"_index":518,"title":{},"body":{"miscellaneous/functions.html":{}}}],["each",{"_index":294,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["ease",{"_index":504,"title":{},"body":{"miscellaneous/functions.html":{}}}],["effort",{"_index":174,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["elastic",{"_index":10,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"miscellaneous/functions.html":{}}}],["elasticaggregation",{"_index":1,"title":{"interfaces/ElasticAggregation.html":{}},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"coverage.html":{}}}],["elasticbucket",{"_index":22,"title":{"interfaces/ElasticBucket.html":{}},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"coverage.html":{}}}],["elastichit",{"_index":43,"title":{"interfaces/ElasticHit.html":{}},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"coverage.html":{}}}],["elasticquery",{"_index":97,"title":{"interfaces/ElasticQuery.html":{}},"body":{"interfaces/ElasticQuery.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["elasticresponse",{"_index":70,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["elasticsearchresponse",{"_index":27,"title":{"interfaces/ElasticSearchResponse.html":{}},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["elasticsort",{"_index":123,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["element",{"_index":321,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["else.ts",{"_index":455,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["empties",{"_index":380,"title":{},"body":{"classes/SubSink.html":{}}}],["empty",{"_index":373,"title":{},"body":{"classes/SubSink.html":{}}}],["en",{"_index":296,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["encompass",{"_index":615,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["end",{"_index":542,"title":{},"body":{"miscellaneous/functions.html":{}}}],["entries.ts",{"_index":470,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["eq",{"_index":39,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["etc",{"_index":172,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["even",{"_index":317,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["everywhere",{"_index":341,"title":{},"body":{"interfaces/Pagination.html":{}}}],["example",{"_index":273,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["exclude",{"_index":558,"title":{},"body":{"miscellaneous/functions.html":{}}}],["execute",{"_index":594,"title":{},"body":{"index.html":{}}}],["export",{"_index":26,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{}}}],["extract",{"_index":90,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["extractonesourcefromelasticresponse",{"_index":431,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["extractonesourcefromelasticresponse(response",{"_index":92,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["extractsourcesfromelasticresponse",{"_index":432,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["extractsourcesfromelasticresponse(response",{"_index":88,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["extractsourcesfromelasticresponse(response)[0",{"_index":93,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["facets",{"_index":313,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["failed",{"_index":35,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["fallback",{"_index":316,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["fallbacklangs",{"_index":325,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["field",{"_index":122,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"changelog.html":{},"coverage.html":{}}}],["filename",{"_index":519,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filter",{"_index":116,"title":{},"body":{"interfaces/ElasticQuery.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["filter(notnil",{"_index":261,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["filtered",{"_index":228,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["filtering",{"_index":554,"title":{},"body":{"miscellaneous/functions.html":{}}}],["first",{"_index":91,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["firstlangavailable",{"_index":331,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["form",{"_index":241,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["format",{"_index":512,"title":{},"body":{"miscellaneous/functions.html":{}}}],["found",{"_index":314,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["fr",{"_index":297,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["from(['a",{"_index":562,"title":{},"body":{"miscellaneous/functions.html":{}}}],["from(this.providers).pipe",{"_index":257,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["function",{"_index":74,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":484,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":405,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["generic",{"_index":337,"title":{},"body":{"interfaces/Pagination.html":{},"miscellaneous/typealiases.html":{}}}],["getallproperties",{"_index":468,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getallproperties(obj",{"_index":529,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getallselectoptions",{"_index":444,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getallselectoptions(options",{"_index":274,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["getlangstringvalue",{"_index":328,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getlangstringvalue(langstring",{"_index":537,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getoptions",{"_index":350,"title":{},"body":{"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["getoptions(query",{"_index":229,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["getselectoptionsparams",{"_index":144,"title":{"interfaces/GetSelectOptionsParams.html":{}},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{}}}],["getting",{"_index":402,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["getvalueoption",{"_index":351,"title":{},"body":{"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["getvalueoption(value",{"_index":233,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["given",{"_index":72,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["goes",{"_index":530,"title":{},"body":{"miscellaneous/functions.html":{}}}],["going",{"_index":573,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gracefull",{"_index":371,"title":{},"body":{"classes/SubSink.html":{}}}],["group",{"_index":268,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["grouped",{"_index":270,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["groupselectoptions",{"_index":446,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["groupselectoptions(options",{"_index":279,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["gte",{"_index":40,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["handling",{"_index":369,"title":{},"body":{"classes/SubSink.html":{}}}],["hasoption",{"_index":260,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["hasoptionfor",{"_index":352,"title":{},"body":{"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["hasoptionfor(value",{"_index":237,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["hasoptions.some(hasoption",{"_index":266,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["having",{"_index":269,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{}}}],["here",{"_index":201,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["historical",{"_index":193,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["hit",{"_index":47,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["hit._source",{"_index":89,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["hits",{"_index":36,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["identifier",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["ie",{"_index":527,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ignore",{"_index":124,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["implement",{"_index":225,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["implements",{"_index":246,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["import",{"_index":150,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":306,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOptionCounts.html":{}}}],["indexed",{"_index":293,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{}}}],["inside",{"_index":62,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["instead",{"_index":103,"title":{},"body":{"interfaces/ElasticQuery.html":{},"miscellaneous/variables.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{}},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"overview.html":{}}}],["internal",{"_index":381,"title":{},"body":{"classes/SubSink.html":{}}}],["interoperability",{"_index":226,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["interoperable",{"_index":176,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["isselectoption",{"_index":447,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isselectoption(o",{"_index":287,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["isselectoption(option",{"_index":283,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["it's",{"_index":339,"title":{},"body":{"interfaces/Pagination.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["item",{"_index":347,"title":{},"body":{"interfaces/Pagination.html":{}}}],["itself",{"_index":621,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["javascript",{"_index":534,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jscutlery/semver",{"_index":406,"title":{},"body":{"changelog.html":{}}}],["json",{"_index":76,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["key",{"_index":45,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["key_as_string",{"_index":66,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["keys",{"_index":301,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/typealiases.html":{}}}],["keyvalue",{"_index":164,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["kind",{"_index":162,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["label",{"_index":183,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["label.tolowercase().includes(lowerquery",{"_index":222,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["label.ts",{"_index":423,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["labels",{"_index":209,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["lang",{"_index":148,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["langstring",{"_index":159,"title":{"interfaces/LangString.html":{}},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["langstringsimple",{"_index":160,"title":{"interfaces/LangStringSimple.html":{}},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["language",{"_index":299,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["languages",{"_index":305,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["lastdynamicgroup",{"_index":281,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["lastdynamicgroup.options.push(option",{"_index":285,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["libraries",{"_index":177,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["library",{"_index":198,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"index.html":{}}}],["limitative",{"_index":109,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["link",{"_index":63,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["linked",{"_index":236,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["list",{"_index":327,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["literal",{"_index":114,"title":{},"body":{"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/SelectOption.html":{},"miscellaneous/typealiases.html":{}}}],["log",{"_index":564,"title":{},"body":{"miscellaneous/functions.html":{}}}],["looking",{"_index":526,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lowerquery",{"_index":213,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["made",{"_index":387,"title":{},"body":{"classes/SubSink.html":{}}}],["main",{"_index":552,"title":{},"body":{"miscellaneous/functions.html":{}}}],["manner",{"_index":372,"title":{},"body":{"classes/SubSink.html":{}}}],["many",{"_index":310,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["manytoarray",{"_index":435,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["manytoarray(x",{"_index":538,"title":{},"body":{"miscellaneous/functions.html":{}}}],["manytoone",{"_index":309,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["manytoone(langstring[firstlangavailable",{"_index":333,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["manytoone(langstring[language",{"_index":330,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["manytoone(x",{"_index":544,"title":{},"body":{"miscellaneous/functions.html":{}}}],["map",{"_index":154,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["map(hasoptions",{"_index":265,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["mapelasticsources",{"_index":433,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["mapelasticsources(response",{"_index":79,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["match",{"_index":119,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["matches",{"_index":210,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":95,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":135,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["max_score",{"_index":41,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["maybe",{"_index":64,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["median",{"_index":136,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["mergemap",{"_index":155,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["mergemap(provider",{"_index":258,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["merges",{"_index":238,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["method",{"_index":394,"title":{},"body":{"classes/SubSink.html":{}}}],["methods",{"_index":349,"title":{},"body":{"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{}}}],["min",{"_index":137,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["minimum_should_match",{"_index":118,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["miscellaneous",{"_index":483,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":129,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["mix",{"_index":342,"title":{},"body":{"interfaces/Pagination.html":{}}}],["mm",{"_index":510,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":133,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["model",{"_index":586,"title":{},"body":{"index.html":{}}}],["models",{"_index":178,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["modules",{"_index":595,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monotypeoperatorfunction",{"_index":517,"title":{},"body":{"miscellaneous/functions.html":{}}}],["more",{"_index":302,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["mostly",{"_index":173,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["multiple",{"_index":239,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"miscellaneous/functions.html":{}}}],["must_not",{"_index":117,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["mystringarray",{"_index":556,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mysubsink",{"_index":389,"title":{},"body":{"classes/SubSink.html":{}}}],["mysubsink.addinarray(timer(1000).subscribe",{"_index":395,"title":{},"body":{"classes/SubSink.html":{}}}],["naively",{"_index":207,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["name",{"_index":355,"title":{},"body":{"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":200,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["needing",{"_index":191,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["new",{"_index":472,"title":{},"body":{"coverage.html":{}}}],["ngfor",{"_index":204,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["ngxs",{"_index":582,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nil",{"_index":149,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["noted",{"_index":319,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["nothing",{"_index":318,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["notnil",{"_index":161,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["notnil(o",{"_index":548,"title":{},"body":{"miscellaneous/functions.html":{}}}],["now",{"_index":110,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["null",{"_index":42,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["nullish",{"_index":540,"title":{},"body":{"miscellaneous/functions.html":{}}}],["number",{"_index":25,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["numbers",{"_index":60,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["nx",{"_index":588,"title":{},"body":{"index.html":{}}}],["o",{"_index":288,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["obecjt",{"_index":572,"title":{},"body":{"miscellaneous/functions.html":{}}}],["obj",{"_index":536,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":120,"title":{},"body":{"interfaces/ElasticQuery.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["object.entries",{"_index":584,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object.keys(langstring).pop",{"_index":332,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["object.ts",{"_index":603,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["object.values(option.label).foreach(labels",{"_index":219,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["obs",{"_index":250,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["observable",{"_index":152,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["one",{"_index":101,"title":{},"body":{"interfaces/ElasticQuery.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["operator",{"_index":513,"title":{},"body":{"miscellaneous/functions.html":{}}}],["operatorfunction",{"_index":567,"title":{},"body":{"miscellaneous/functions.html":{}}}],["option",{"_index":170,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["option.label",{"_index":217,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["option.ts",{"_index":146,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["option.ts:101",{"_index":362,"title":{},"body":{"classes/SelectOptionsProvidersMerger.html":{}}}],["option.ts:109",{"_index":363,"title":{},"body":{"classes/SelectOptionsProvidersMerger.html":{}}}],["option.ts:122",{"_index":364,"title":{},"body":{"classes/SelectOptionsProvidersMerger.html":{}}}],["option.ts:39",{"_index":348,"title":{},"body":{"interfaces/SelectOptionCounts.html":{}}}],["option.ts:72",{"_index":353,"title":{},"body":{"interfaces/SelectOptionsProvider.html":{}}}],["option.ts:77",{"_index":356,"title":{},"body":{"interfaces/SelectOptionsProvider.html":{}}}],["option.ts:82",{"_index":357,"title":{},"body":{"interfaces/SelectOptionsProvider.html":{}}}],["option.ts:95",{"_index":361,"title":{},"body":{"classes/SelectOptionsProvidersMerger.html":{}}}],["option.value",{"_index":206,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["optional",{"_index":18,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":271,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["options.foreach(option",{"_index":276,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["order",{"_index":126,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["ordered",{"_index":326,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["orelse",{"_index":456,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["orelse(value",{"_index":559,"title":{},"body":{"miscellaneous/functions.html":{}}}],["originates",{"_index":338,"title":{},"body":{"interfaces/Pagination.html":{}}}],["overview",{"_index":596,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":475,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":345,"title":{},"body":{"interfaces/Pagination.html":{}}}],["pagination",{"_index":335,"title":{"interfaces/Pagination.html":{}},"body":{"interfaces/Pagination.html":{},"coverage.html":{}}}],["param",{"_index":75,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["parameters",{"_index":354,"title":{},"body":{"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":230,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["parts",{"_index":579,"title":{},"body":{"miscellaneous/functions.html":{}}}],["passes",{"_index":561,"title":{},"body":{"miscellaneous/functions.html":{}}}],["peer",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["piped",{"_index":505,"title":{},"body":{"miscellaneous/functions.html":{}}}],["placeholder",{"_index":197,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["pool",{"_index":382,"title":{},"body":{"classes/SubSink.html":{}}}],["preferred",{"_index":324,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["presentational",{"_index":184,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["private",{"_index":396,"title":{},"body":{"classes/SubSink.html":{}}}],["project",{"_index":73,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["project(hit._source",{"_index":84,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["projection",{"_index":78,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["promise",{"_index":503,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["prop.ts",{"_index":458,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":17,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionGroup.html":{},"miscellaneous/functions.html":{}}}],["properties.ts",{"_index":467,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["property",{"_index":571,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prototype",{"_index":531,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provider",{"_index":235,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["provider.getoptions(query",{"_index":252,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["provider.getvalueoption(value",{"_index":263,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["provider.hasoptionfor(value",{"_index":264,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["provider.hasoptionfor(value).pipe(map(hasoption",{"_index":259,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["providers",{"_index":248,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["provides",{"_index":224,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["purposes",{"_index":185,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["put",{"_index":199,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["query",{"_index":107,"title":{},"body":{"interfaces/ElasticQuery.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["query.tolowercase",{"_index":214,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["query.ts",{"_index":98,"title":{},"body":{"interfaces/ElasticQuery.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["quite",{"_index":108,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["rdf:langstring",{"_index":291,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["reactive",{"_index":580,"title":{},"body":{"miscellaneous/functions.html":{}}}],["record",{"_index":610,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["relation",{"_index":38,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["represents",{"_index":267,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/typealiases.html":{}}}],["resource",{"_index":501,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["response",{"_index":48,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["response.hits",{"_index":82,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["response.hits.hits.map(hit",{"_index":83,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["response.ts",{"_index":7,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["result",{"_index":94,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":96,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":68,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["returned",{"_index":77,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["returns",{"_index":234,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["right",{"_index":577,"title":{},"body":{"miscellaneous/functions.html":{}}}],["run",{"_index":592,"title":{},"body":{"index.html":{}}}],["running",{"_index":589,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":153,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["rxjs/operators",{"_index":158,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["safe",{"_index":541,"title":{},"body":{"miscellaneous/functions.html":{}}}],["same",{"_index":311,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["search",{"_index":106,"title":{},"body":{"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["see",{"_index":249,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["select",{"_index":169,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["selecting",{"_index":578,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectoption",{"_index":179,"title":{"interfaces/SelectOption.html":{}},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selectoptioncounts",{"_index":202,"title":{"interfaces/SelectOptionCounts.html":{}},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{}}}],["selectoptiongroup",{"_index":231,"title":{"interfaces/SelectOptionGroup.html":{}},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectoptionlabel",{"_index":186,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/typealiases.html":{}}}],["selectoptionmatchquery",{"_index":448,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectoptionmatchquery(option",{"_index":211,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["selectoptionsprovider",{"_index":227,"title":{"interfaces/SelectOptionsProvider.html":{}},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{}}}],["selectoptionsprovidersmerger",{"_index":245,"title":{"classes/SelectOptionsProvidersMerger.html":{}},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{}}}],["selectprop",{"_index":459,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectprop(key",{"_index":568,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selects",{"_index":272,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["sense",{"_index":612,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["service",{"_index":223,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["set",{"_index":181,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{}}}],["setadd(value",{"_index":384,"title":{},"body":{"classes/SubSink.html":{}}}],["shorthand",{"_index":619,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["simple",{"_index":295,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["simply",{"_index":569,"title":{},"body":{"miscellaneous/functions.html":{}}}],["single",{"_index":86,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["sink.ts",{"_index":367,"title":{},"body":{"classes/SubSink.html":{},"coverage.html":{}}}],["sink.ts:16",{"_index":385,"title":{},"body":{"classes/SubSink.html":{}}}],["sink.ts:23",{"_index":376,"title":{},"body":{"classes/SubSink.html":{}}}],["size",{"_index":112,"title":{},"body":{"interfaces/ElasticQuery.html":{},"interfaces/Pagination.html":{}}}],["skipped",{"_index":34,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["sort",{"_index":57,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["sorter",{"_index":607,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"miscellaneous/functions.html":{}}}],["specify",{"_index":620,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../any",{"_index":602,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../completable.ts",{"_index":485,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../cz",{"_index":487,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../date",{"_index":488,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../debounce",{"_index":489,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../dictionary.ts",{"_index":606,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../download",{"_index":490,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../elastic",{"_index":486,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../get",{"_index":491,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../lang",{"_index":493,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../many.ts",{"_index":494,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../nil.ts",{"_index":495,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../or",{"_index":496,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../select",{"_index":492,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../sorter.ts",{"_index":608,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../strict",{"_index":497,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/models/any",{"_index":609,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/models/completable.ts",{"_index":415,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/models/cz",{"_index":422,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/models/dictionary.ts",{"_index":618,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/models/elastic",{"_index":6,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/models/lang",{"_index":289,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/models/many.ts",{"_index":434,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/models/nil.ts",{"_index":436,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/models/pagination.ts",{"_index":336,"title":{},"body":{"interfaces/Pagination.html":{},"coverage.html":{}}}],["src/lib/models/select",{"_index":145,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/models/sorter.ts",{"_index":622,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/models/sub",{"_index":366,"title":{},"body":{"classes/SubSink.html":{},"coverage.html":{}}}],["src/lib/operators/debounce",{"_index":451,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/operators/or",{"_index":454,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/operators/select",{"_index":457,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/utils/date",{"_index":460,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/utils/download",{"_index":463,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/utils/get",{"_index":466,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/utils/strict",{"_index":469,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":403,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["state",{"_index":581,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":195,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["stream",{"_index":555,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strictentries",{"_index":471,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["strictentries(o",{"_index":583,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string",{"_index":46,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["string.ts",{"_index":290,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["string.ts:11",{"_index":308,"title":{},"body":{"interfaces/LangString.html":{}}}],["string.ts:18",{"_index":334,"title":{},"body":{"interfaces/LangStringSimple.html":{}}}],["strongly",{"_index":585,"title":{},"body":{"miscellaneous/functions.html":{}}}],["structure",{"_index":141,"title":{},"body":{"interfaces/ElasticQuery.html":{},"miscellaneous/functions.html":{}}}],["sub.unsubscribe",{"_index":400,"title":{},"body":{"classes/SubSink.html":{}}}],["subscription",{"_index":370,"title":{},"body":{"classes/SubSink.html":{}}}],["subscriptions",{"_index":379,"title":{},"body":{"classes/SubSink.html":{}}}],["subsink",{"_index":365,"title":{"classes/SubSink.html":{}},"body":{"classes/SubSink.html":{},"coverage.html":{}}}],["successful",{"_index":33,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["succession",{"_index":388,"title":{},"body":{"classes/SubSink.html":{}}}],["sum",{"_index":138,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["sum_other_doc_count",{"_index":21,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["sure",{"_index":58,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["switchmap",{"_index":156,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["switchmap(provider",{"_index":262,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["sync.ts",{"_index":452,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["synchronous",{"_index":515,"title":{},"body":{"miscellaneous/functions.html":{}}}],["t",{"_index":52,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["table",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":473,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":570,"title":{},"body":{"miscellaneous/functions.html":{}}}],["taken",{"_index":322,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["taking",{"_index":546,"title":{},"body":{"miscellaneous/functions.html":{}}}],["terms",{"_index":125,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["test",{"_index":593,"title":{},"body":{"index.html":{}}}],["tests",{"_index":591,"title":{},"body":{"index.html":{}}}],["that's",{"_index":300,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["this.providers.map(provider",{"_index":251,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["this.subscriptions",{"_index":401,"title":{},"body":{"classes/SubSink.html":{}}}],["this.subscriptions.foreach(sub",{"_index":399,"title":{},"body":{"classes/SubSink.html":{}}}],["this.subscriptions.push(value",{"_index":398,"title":{},"body":{"classes/SubSink.html":{}}}],["those",{"_index":312,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["timed_out",{"_index":29,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["timer(1000).subscribe",{"_index":391,"title":{},"body":{"classes/SubSink.html":{}}}],["timer(500).subscribe",{"_index":390,"title":{},"body":{"classes/SubSink.html":{}}}],["toarray",{"_index":157,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["together",{"_index":240,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["took",{"_index":28,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["total",{"_index":32,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["track_total_hits",{"_index":113,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["trackbyfn",{"_index":203,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["trackbyselectoption",{"_index":449,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["trackbyselectoption(index",{"_index":205,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["transformed",{"_index":69,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["trhough",{"_index":574,"title":{},"body":{"miscellaneous/functions.html":{}}}],["triggers",{"_index":520,"title":{},"body":{"miscellaneous/functions.html":{}}}],["trough",{"_index":13,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["true",{"_index":188,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["try",{"_index":315,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["tslib",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["tu",{"_index":187,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["type",{"_index":23,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":599,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":51,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"miscellaneous/functions.html":{}}}],["typeof",{"_index":216,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["types",{"_index":617,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typescript",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["u",{"_index":81,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["undefined",{"_index":282,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unified",{"_index":242,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["union",{"_index":614,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unique",{"_index":182,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["unit",{"_index":590,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":65,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticQuery.html":{},"interfaces/ElasticSearchResponse.html":{}}}],["unmapped_type",{"_index":132,"title":{},"body":{"interfaces/ElasticQuery.html":{}}}],["unsuscribe",{"_index":377,"title":{},"body":{"classes/SubSink.html":{}}}],["up",{"_index":343,"title":{},"body":{"interfaces/Pagination.html":{},"miscellaneous/functions.html":{}}}],["uri",{"_index":304,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["usage",{"_index":553,"title":{},"body":{"miscellaneous/functions.html":{}}}],["use",{"_index":100,"title":{},"body":{"interfaces/ElasticQuery.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/Pagination.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":165,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["useful",{"_index":190,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["user",{"_index":168,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["using",{"_index":71,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["usual",{"_index":616,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["usually",{"_index":292,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{}}}],["utility",{"_index":368,"title":{},"body":{"classes/SubSink.html":{}}}],["utils",{"_index":587,"title":{},"body":{"index.html":{}}}],["value",{"_index":37,"title":{},"body":{"interfaces/ElasticAggregation.html":{},"interfaces/ElasticBucket.html":{},"interfaces/ElasticHit.html":{},"interfaces/ElasticSearchResponse.html":{},"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"classes/SubSink.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":194,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{},"miscellaneous/functions.html":{}}}],["variable",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":625,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":383,"title":{},"body":{"classes/SubSink.html":{},"miscellaneous/functions.html":{}}}],["want",{"_index":323,"title":{},"body":{"interfaces/LangString.html":{},"interfaces/LangStringSimple.html":{},"miscellaneous/functions.html":{}}}],["way",{"_index":516,"title":{},"body":{"miscellaneous/functions.html":{}}}],["whatever",{"_index":196,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["whenever",{"_index":166,"title":{},"body":{"interfaces/GetSelectOptionsParams.html":{},"interfaces/SelectOption.html":{},"interfaces/SelectOptionCounts.html":{},"interfaces/SelectOptionGroup.html":{},"interfaces/SelectOptionsProvider.html":{},"classes/SelectOptionsProvidersMerger.html":{}}}],["wrap",{"_index":393,"title":{},"body":{"classes/SubSink.html":{}}}],["x",{"_index":543,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yes",{"_index":528,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yyyy",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ElasticAggregation.html":{"url":"interfaces/ElasticAggregation.html","title":"interface - ElasticAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ElasticAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/elastic-response.ts\n        \n\n\n            \n                Description\n            \n            \n                The content of an elastic aggregation done trough a _search call\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            buckets\n                                        \n                                \n                                \n                                        \n                                            doc_count_error_upper_bound\n                                        \n                                \n                                \n                                        \n                                            sum_other_doc_count\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buckets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buckets:         ElasticBucket[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ElasticBucket[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        doc_count_error_upper_bound\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        doc_count_error_upper_bound:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sum_other_doc_count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sum_other_doc_count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ElasticSearchResponse {\n  took: number;\n  timed_out: boolean;\n  _shards: {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n  };\n  hits: {\n    total: {\n      value: number;\n      relation: 'eq' | 'gte';\n    };\n    max_score: number | null;\n    hits: ElasticHit[];\n  };\n  aggregations: { [key: string]: ElasticAggregation };\n}\n\n/**\n * A hit in an elastic response, with `_source` being typed as `T`\n */\nexport interface ElasticHit {\n  _index: string;\n  _type: string;\n  _id: string;\n  _score?: number;\n  _source: T;\n  sort?: number[]; // not sure if always numbers\n}\n\n/**\n * The content of an elastic aggregation done trough a _search call\n */\nexport interface ElasticAggregation {\n  doc_count_error_upper_bound: number;\n  sum_other_doc_count: number;\n  buckets?: ElasticBucket[];\n}\n\n/**\n * A bucket that is inside an {@link ElasticAggregation}\n */\nexport interface ElasticBucket {\n  key: number | string; // maybe unknown\n  key_as_string?: string;\n  doc_count: number;\n}\n\n/**\n * Return a transformed {@link ElasticResponse} where all `_source` are transformed using the given `project` function\n *\n * @param response The json returned by a _search elastic call\n * @param project The projection function\n */\nexport function mapElasticSources(response: ElasticSearchResponse, project: (data: T) => U): ElasticSearchResponse {\n  return { ...response, hits: { ...response.hits, hits: response.hits.hits.map(hit => ({ ...hit, _source: project(hit._source) })) } };\n}\n\n/**\n * Aggregate all `_source` in all `hits` of an {@link ElasticResponse} in a single array\n *\n * @param response The json returned by a _search elastic call\n */\nexport function extractSourcesFromElasticResponse(response: ElasticSearchResponse): T[] {\n  return response.hits.hits.map(hit => hit._source);\n}\n\n/**\n * Extract the first `_source` of the first `hits` of an {@link ElasticResponse}\n *\n * @param response The json returned by a _search elastic call\n */\nexport function extractOneSourceFromElasticResponse(response: ElasticSearchResponse): T {\n  return extractSourcesFromElasticResponse(response)[0];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ElasticBucket.html":{"url":"interfaces/ElasticBucket.html","title":"interface - ElasticBucket","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ElasticBucket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/elastic-response.ts\n        \n\n\n            \n                Description\n            \n            \n                A bucket that is inside an ElasticAggregation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            doc_count\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            key_as_string\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        doc_count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        doc_count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:     number | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key_as_string\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key_as_string:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ElasticSearchResponse {\n  took: number;\n  timed_out: boolean;\n  _shards: {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n  };\n  hits: {\n    total: {\n      value: number;\n      relation: 'eq' | 'gte';\n    };\n    max_score: number | null;\n    hits: ElasticHit[];\n  };\n  aggregations: { [key: string]: ElasticAggregation };\n}\n\n/**\n * A hit in an elastic response, with `_source` being typed as `T`\n */\nexport interface ElasticHit {\n  _index: string;\n  _type: string;\n  _id: string;\n  _score?: number;\n  _source: T;\n  sort?: number[]; // not sure if always numbers\n}\n\n/**\n * The content of an elastic aggregation done trough a _search call\n */\nexport interface ElasticAggregation {\n  doc_count_error_upper_bound: number;\n  sum_other_doc_count: number;\n  buckets?: ElasticBucket[];\n}\n\n/**\n * A bucket that is inside an {@link ElasticAggregation}\n */\nexport interface ElasticBucket {\n  key: number | string; // maybe unknown\n  key_as_string?: string;\n  doc_count: number;\n}\n\n/**\n * Return a transformed {@link ElasticResponse} where all `_source` are transformed using the given `project` function\n *\n * @param response The json returned by a _search elastic call\n * @param project The projection function\n */\nexport function mapElasticSources(response: ElasticSearchResponse, project: (data: T) => U): ElasticSearchResponse {\n  return { ...response, hits: { ...response.hits, hits: response.hits.hits.map(hit => ({ ...hit, _source: project(hit._source) })) } };\n}\n\n/**\n * Aggregate all `_source` in all `hits` of an {@link ElasticResponse} in a single array\n *\n * @param response The json returned by a _search elastic call\n */\nexport function extractSourcesFromElasticResponse(response: ElasticSearchResponse): T[] {\n  return response.hits.hits.map(hit => hit._source);\n}\n\n/**\n * Extract the first `_source` of the first `hits` of an {@link ElasticResponse}\n *\n * @param response The json returned by a _search elastic call\n */\nexport function extractOneSourceFromElasticResponse(response: ElasticSearchResponse): T {\n  return extractSourcesFromElasticResponse(response)[0];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ElasticHit.html":{"url":"interfaces/ElasticHit.html","title":"interface - ElasticHit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ElasticHit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/elastic-response.ts\n        \n\n\n            \n                Description\n            \n            \n                A hit in an elastic response, with _source being typed as T\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                                \n                                        \n                                            _index\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            _score\n                                        \n                                \n                                \n                                        \n                                            _source\n                                        \n                                \n                                \n                                        \n                                            _type\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sort\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        _index\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _index:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        _score\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _score:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        _source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _source:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        _type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sort\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sort:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ElasticSearchResponse {\n  took: number;\n  timed_out: boolean;\n  _shards: {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n  };\n  hits: {\n    total: {\n      value: number;\n      relation: 'eq' | 'gte';\n    };\n    max_score: number | null;\n    hits: ElasticHit[];\n  };\n  aggregations: { [key: string]: ElasticAggregation };\n}\n\n/**\n * A hit in an elastic response, with `_source` being typed as `T`\n */\nexport interface ElasticHit {\n  _index: string;\n  _type: string;\n  _id: string;\n  _score?: number;\n  _source: T;\n  sort?: number[]; // not sure if always numbers\n}\n\n/**\n * The content of an elastic aggregation done trough a _search call\n */\nexport interface ElasticAggregation {\n  doc_count_error_upper_bound: number;\n  sum_other_doc_count: number;\n  buckets?: ElasticBucket[];\n}\n\n/**\n * A bucket that is inside an {@link ElasticAggregation}\n */\nexport interface ElasticBucket {\n  key: number | string; // maybe unknown\n  key_as_string?: string;\n  doc_count: number;\n}\n\n/**\n * Return a transformed {@link ElasticResponse} where all `_source` are transformed using the given `project` function\n *\n * @param response The json returned by a _search elastic call\n * @param project The projection function\n */\nexport function mapElasticSources(response: ElasticSearchResponse, project: (data: T) => U): ElasticSearchResponse {\n  return { ...response, hits: { ...response.hits, hits: response.hits.hits.map(hit => ({ ...hit, _source: project(hit._source) })) } };\n}\n\n/**\n * Aggregate all `_source` in all `hits` of an {@link ElasticResponse} in a single array\n *\n * @param response The json returned by a _search elastic call\n */\nexport function extractSourcesFromElasticResponse(response: ElasticSearchResponse): T[] {\n  return response.hits.hits.map(hit => hit._source);\n}\n\n/**\n * Extract the first `_source` of the first `hits` of an {@link ElasticResponse}\n *\n * @param response The json returned by a _search elastic call\n */\nexport function extractOneSourceFromElasticResponse(response: ElasticSearchResponse): T {\n  return extractSourcesFromElasticResponse(response)[0];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ElasticQuery.html":{"url":"interfaces/ElasticQuery.html","title":"interface - ElasticQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ElasticQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/elastic-query.ts\n        \n\n            \n                Deprecated\n            \n            \n                use the one from `@cognizone/elastic` instead\n            \n\n            \n                Description\n            \n            \n                This aims to describe an elastic search query, but it can be quite limitative\nfor now\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            aggs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            from\n                                        \n                                \n                                \n                                        \n                                            query\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sort\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            track_total_hits\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggs:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        from:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sort\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sort:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        track_total_hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        track_total_hits:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ElasticQuery {\n  from?: number;\n  size?: number;\n  track_total_hits?: boolean;\n  query: {\n    bool?: {\n      filter: unknown[];\n      must: unknown[];\n      must_not: unknown[];\n      should: unknown[];\n      minimum_should_match?: number;\n    };\n    match?: object;\n  };\n  aggs?: { [key: string]: AggregationQuery };\n  sort?: { [field: string]: ElasticSort };\n}\n\n/**\n * @ignore\n */\nexport type AggregationQuery =\n  | unknown\n  | {\n      terms: {\n        field: string;\n        size: number;\n      };\n    };\n\n/**\n * @ignore\n */\nexport interface ElasticSort {\n  order: 'asc' | 'desc';\n  missing?: '_first' | '_last';\n  unmapped_type?: string;\n  mode?: 'avg' | 'max' | 'median' | 'min' | 'sum';\n}\n\n/**\n * Create a basic structure for an {@link ElasticQuery}\n *\n * @deprecated\n */\nexport function createElasticQuery(): ElasticQuery {\n  return {\n    query: {\n      bool: {\n        filter: [],\n        must: [],\n        must_not: [],\n        should: [],\n      },\n    },\n    aggs: {},\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ElasticSearchResponse.html":{"url":"interfaces/ElasticSearchResponse.html","title":"interface - ElasticSearchResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ElasticSearchResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/elastic-response.ts\n        \n\n\n            \n                Description\n            \n            \n                Describe the response of a search done on Elastic 7+, with _source in hits\nbeing typed with T\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _shards\n                                        \n                                \n                                \n                                        \n                                            aggregations\n                                        \n                                \n                                \n                                        \n                                            hits\n                                        \n                                \n                                \n                                        \n                                            timed_out\n                                        \n                                \n                                \n                                        \n                                            took\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _shards\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _shards:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        aggregations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregations:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timed_out\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timed_out:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        took\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        took:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ElasticSearchResponse {\n  took: number;\n  timed_out: boolean;\n  _shards: {\n    total: number;\n    successful: number;\n    skipped: number;\n    failed: number;\n  };\n  hits: {\n    total: {\n      value: number;\n      relation: 'eq' | 'gte';\n    };\n    max_score: number | null;\n    hits: ElasticHit[];\n  };\n  aggregations: { [key: string]: ElasticAggregation };\n}\n\n/**\n * A hit in an elastic response, with `_source` being typed as `T`\n */\nexport interface ElasticHit {\n  _index: string;\n  _type: string;\n  _id: string;\n  _score?: number;\n  _source: T;\n  sort?: number[]; // not sure if always numbers\n}\n\n/**\n * The content of an elastic aggregation done trough a _search call\n */\nexport interface ElasticAggregation {\n  doc_count_error_upper_bound: number;\n  sum_other_doc_count: number;\n  buckets?: ElasticBucket[];\n}\n\n/**\n * A bucket that is inside an {@link ElasticAggregation}\n */\nexport interface ElasticBucket {\n  key: number | string; // maybe unknown\n  key_as_string?: string;\n  doc_count: number;\n}\n\n/**\n * Return a transformed {@link ElasticResponse} where all `_source` are transformed using the given `project` function\n *\n * @param response The json returned by a _search elastic call\n * @param project The projection function\n */\nexport function mapElasticSources(response: ElasticSearchResponse, project: (data: T) => U): ElasticSearchResponse {\n  return { ...response, hits: { ...response.hits, hits: response.hits.hits.map(hit => ({ ...hit, _source: project(hit._source) })) } };\n}\n\n/**\n * Aggregate all `_source` in all `hits` of an {@link ElasticResponse} in a single array\n *\n * @param response The json returned by a _search elastic call\n */\nexport function extractSourcesFromElasticResponse(response: ElasticSearchResponse): T[] {\n  return response.hits.hits.map(hit => hit._source);\n}\n\n/**\n * Extract the first `_source` of the first `hits` of an {@link ElasticResponse}\n *\n * @param response The json returned by a _search elastic call\n */\nexport function extractOneSourceFromElasticResponse(response: ElasticSearchResponse): T {\n  return extractSourcesFromElasticResponse(response)[0];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetSelectOptionsParams.html":{"url":"interfaces/GetSelectOptionsParams.html","title":"interface - GetSelectOptionsParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetSelectOptionsParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/select-option.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            counts\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lang\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        counts:         Nil\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Nil\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lang\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lang:         Nil\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Nil\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { combineLatest, from, Observable } from 'rxjs';\nimport { filter, first, map, mergeMap, switchMap, toArray } from 'rxjs/operators';\n\nimport { LangString, LangStringSimple } from './lang-string';\nimport { Nil, notNil } from './nil';\n\n/**\n * Kind of an augmented KeyValue type to be used whenever we have case where a\n * user has to select an option, being it in a select, an autocomplete, etc.\n * This is mostly there in an effort of consistency, to have interoperable libraries and data models.\n */\nexport interface SelectOption {\n  /**\n   * The value associated to the SelectOption. In a given set, this should be unique.\n   */\n  value: T;\n  /**\n   * The label, used for presentational purposes\n   */\n  label: SelectOptionLabel;\n  /**\n   * Set tu true if this option is disabled, useful when needing to display historical values.\n   */\n  disabled?: boolean;\n  /**\n   * Can store whatever, placeholder for library to put whatever they need here.\n   */\n  data?: {};\n}\n\n/**\n * The label of a {@link SelectOption}\n */\nexport type SelectOptionLabel = LangString | LangStringSimple | string;\n\n/**\n * For consistency, this interface is to be used when needing to use counts for {@link SelectOption}\n */\nexport interface SelectOptionCounts {\n  [value: string]: number;\n}\n\n/**\n * a TrackByFn to be used with an `*ngFor` in case it is used on an array of {@link SelectOption}\n */\nexport function trackBySelectOption(index: number, option: SelectOption): T {\n  return option.value;\n}\n\n/**\n * This will (naively) check that on the labels of the given option matches the query.\n */\nexport function selectOptionMatchQuery(option: SelectOption, query: Nil): boolean {\n  if (!query) return true;\n  const lowerQuery = query.toLowerCase();\n  const allLabels = [];\n  if (typeof option.label === 'string') {\n    allLabels.push(option.label);\n  } else {\n    Object.values(option.label).forEach(labels => allLabels.push(...labels));\n  }\n  return allLabels.some(label => label.toLowerCase().includes(lowerQuery));\n}\n\n/**\n * Any service or other that provides an array of SelectOption should implement this interface for consistency and interoperability.\n */\nexport interface SelectOptionsProvider {\n  /**\n   * Given the query, will return a filtered array of `SelectOption` that all matches.\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]>;\n\n  /**\n   * Given a value, will return the SelectOption corresponding that value.\n   */\n  getValueOption(value: T): Observable>;\n\n  /**\n   * Returns `true` if this provider has a `SelectOption` that is linked to the given value.\n   */\n  hasOptionFor(value: T): Observable;\n}\n\nexport interface GetSelectOptionsParams {\n  counts?: Nil;\n  lang?: Nil;\n}\n\n/**\n * Merges multiple SelectOptionsProvider together to form a unified one.\n *\n * @deprectated\n */\nexport class SelectOptionsProvidersMerger implements SelectOptionsProvider {\n  constructor(private providers: SelectOptionsProvider[]) {}\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]> {\n    const obs = this.providers.map(provider => provider.getOptions(query, params));\n    return combineLatest(obs).pipe(map(allOptions => allOptions.reduce((acc, curr) => [...acc, ...curr], [])));\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getValueOption(value: T): Observable> {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value).pipe(map(hasOption => (hasOption ? provider : null)))),\n      filter(notNil),\n      first(),\n      switchMap(provider => provider.getValueOption(value)),\n      first()\n    );\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  hasOptionFor(value: T): Observable {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value)),\n      toArray(),\n      map(hasOptions => hasOptions.some(hasOption => hasOption))\n    );\n  }\n}\n\n/**\n * Represents a group SelectOption, might be useful when having grouped options in selects for example\n */\nexport interface SelectOptionGroup {\n  /**\n   * Label of the group\n   */\n  label?: SelectOptionLabel;\n\n  /**\n   * Options that are inside that group\n   */\n  options: SelectOption[];\n}\n\nexport function getAllSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOption[] {\n  const allOptions: SelectOption[] = [];\n  options.forEach(option => {\n    if ('value' in option) {\n      allOptions.push(option);\n    } else {\n      allOptions.push(...option.options);\n    }\n  });\n  return allOptions;\n}\n\nexport function groupSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOptionGroup[] {\n  const allGroups: SelectOptionGroup[] = [];\n  let lastDynamicGroup: SelectOptionGroup | undefined;\n  for (const option of options) {\n    if (isSelectOption(option)) {\n      if (!lastDynamicGroup) {\n        lastDynamicGroup = { options: [] };\n        allGroups.push(lastDynamicGroup);\n      }\n      lastDynamicGroup.options.push(option);\n    } else {\n      lastDynamicGroup = undefined;\n      allGroups.push(option);\n    }\n  }\n  return allGroups;\n}\n\nfunction isSelectOption(o: SelectOption | SelectOptionGroup): o is SelectOption {\n  return 'value' in o;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LangString.html":{"url":"interfaces/LangString.html","title":"interface - LangString","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LangString\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/lang-string.ts\n        \n\n\n            \n                Description\n            \n            \n                This represents an rdf:langString as usually indexed in our elastic. Each key\nis a lang (usually simple, like 'en' or 'fr') and its corersponding value is\nthe label in that language. In here, there can be multiple values, that's why\nit is a string[]. Also, keys could be more complex, like uri of the\nlanguages\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [lang: string]:    string[]\n\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/lang-string.ts:11\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { manyToOne } from './many';\nimport { Nil } from './nil';\n\n/**\n * This represents an rdf:langString as usually indexed in our elastic. Each key\n * is a lang (usually simple, like 'en' or 'fr') and its corersponding value is\n * the label in that language. In here, there can be multiple values, that's why\n * it is a `string[]`. Also, keys could be more complex, like uri of the\n * languages\n */\nexport interface LangString {\n  [lang: string]: string[];\n}\n\n/**\n * Same as {@link LangString} but the value linked to a lang is unique. We usually see those in facets.\n */\nexport interface LangStringSimple {\n  [lang: string]: string;\n}\n\n/**\n * Extract from a {@link LangString} the label in a corresponding `lang`. If not\n * found, it will try extract the label of one of the fallback languages.\n * If even there nothing is found, it will fallback to the first label found.\n * It is to be noted that even if the label is a string[] with multiple values,\n * only the 0th element will be taken.\n *\n * @param langString The lang string from which we want to extract a label\n * @param lang The preferred lang to get the label for\n * @param fallbackLangs ordered list of fallback languages\n */\nexport function getLangStringValue(\n  langString: Nil,\n  lang: string,\n  fallbackLangs: string[] = []\n): string | undefined {\n  if (!langString) return undefined;\n  const allLangs = [lang, ...fallbackLangs];\n\n  for (const language of allLangs) {\n    const label = manyToOne(langString[language]);\n    if (label) return label;\n  }\n  const firstLangAvailable = Object.keys(langString).pop();\n\n  return firstLangAvailable ? manyToOne(langString[firstLangAvailable]) : undefined;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LangStringSimple.html":{"url":"interfaces/LangStringSimple.html","title":"interface - LangStringSimple","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LangStringSimple\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/lang-string.ts\n        \n\n\n            \n                Description\n            \n            \n                Same as LangString but the value linked to a lang is unique. We usually see those in facets.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [lang: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/lang-string.ts:18\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { manyToOne } from './many';\nimport { Nil } from './nil';\n\n/**\n * This represents an rdf:langString as usually indexed in our elastic. Each key\n * is a lang (usually simple, like 'en' or 'fr') and its corersponding value is\n * the label in that language. In here, there can be multiple values, that's why\n * it is a `string[]`. Also, keys could be more complex, like uri of the\n * languages\n */\nexport interface LangString {\n  [lang: string]: string[];\n}\n\n/**\n * Same as {@link LangString} but the value linked to a lang is unique. We usually see those in facets.\n */\nexport interface LangStringSimple {\n  [lang: string]: string;\n}\n\n/**\n * Extract from a {@link LangString} the label in a corresponding `lang`. If not\n * found, it will try extract the label of one of the fallback languages.\n * If even there nothing is found, it will fallback to the first label found.\n * It is to be noted that even if the label is a string[] with multiple values,\n * only the 0th element will be taken.\n *\n * @param langString The lang string from which we want to extract a label\n * @param lang The preferred lang to get the label for\n * @param fallbackLangs ordered list of fallback languages\n */\nexport function getLangStringValue(\n  langString: Nil,\n  lang: string,\n  fallbackLangs: string[] = []\n): string | undefined {\n  if (!langString) return undefined;\n  const allLangs = [lang, ...fallbackLangs];\n\n  for (const language of allLangs) {\n    const label = manyToOne(langString[language]);\n    if (label) return label;\n  }\n  const firstLangAvailable = Object.keys(langString).pop();\n\n  return firstLangAvailable ? manyToOne(langString[firstLangAvailable]) : undefined;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Pagination.html":{"url":"interfaces/Pagination.html","title":"interface - Pagination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Pagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/pagination.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic pagination type, it originates from elastic query, but it's better\nto use this interface everywhere we have pagination, to not mix it up with\nother kind of pagination, based on page number for example.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            from\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        from:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    absolute index of the first item of the page\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Size of the page\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Pagination {\n  /**\n   * absolute index of the first item of the page\n   */\n  from: number;\n  /**\n   * Size of the page\n   */\n  size: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOption.html":{"url":"interfaces/SelectOption.html","title":"interface - SelectOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/select-option.ts\n        \n\n\n            \n                Description\n            \n            \n                Kind of an augmented KeyValue type to be used whenever we have case where a\nuser has to select an option, being it in a select, an autocomplete, etc.\nThis is mostly there in an effort of consistency, to have interoperable libraries and data models.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Can store whatever, placeholder for library to put whatever they need here.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set tu true if this option is disabled, useful when needing to display historical values.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         SelectOptionLabel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SelectOptionLabel\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The label, used for presentational purposes\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The value associated to the SelectOption. In a given set, this should be unique.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { combineLatest, from, Observable } from 'rxjs';\nimport { filter, first, map, mergeMap, switchMap, toArray } from 'rxjs/operators';\n\nimport { LangString, LangStringSimple } from './lang-string';\nimport { Nil, notNil } from './nil';\n\n/**\n * Kind of an augmented KeyValue type to be used whenever we have case where a\n * user has to select an option, being it in a select, an autocomplete, etc.\n * This is mostly there in an effort of consistency, to have interoperable libraries and data models.\n */\nexport interface SelectOption {\n  /**\n   * The value associated to the SelectOption. In a given set, this should be unique.\n   */\n  value: T;\n  /**\n   * The label, used for presentational purposes\n   */\n  label: SelectOptionLabel;\n  /**\n   * Set tu true if this option is disabled, useful when needing to display historical values.\n   */\n  disabled?: boolean;\n  /**\n   * Can store whatever, placeholder for library to put whatever they need here.\n   */\n  data?: {};\n}\n\n/**\n * The label of a {@link SelectOption}\n */\nexport type SelectOptionLabel = LangString | LangStringSimple | string;\n\n/**\n * For consistency, this interface is to be used when needing to use counts for {@link SelectOption}\n */\nexport interface SelectOptionCounts {\n  [value: string]: number;\n}\n\n/**\n * a TrackByFn to be used with an `*ngFor` in case it is used on an array of {@link SelectOption}\n */\nexport function trackBySelectOption(index: number, option: SelectOption): T {\n  return option.value;\n}\n\n/**\n * This will (naively) check that on the labels of the given option matches the query.\n */\nexport function selectOptionMatchQuery(option: SelectOption, query: Nil): boolean {\n  if (!query) return true;\n  const lowerQuery = query.toLowerCase();\n  const allLabels = [];\n  if (typeof option.label === 'string') {\n    allLabels.push(option.label);\n  } else {\n    Object.values(option.label).forEach(labels => allLabels.push(...labels));\n  }\n  return allLabels.some(label => label.toLowerCase().includes(lowerQuery));\n}\n\n/**\n * Any service or other that provides an array of SelectOption should implement this interface for consistency and interoperability.\n */\nexport interface SelectOptionsProvider {\n  /**\n   * Given the query, will return a filtered array of `SelectOption` that all matches.\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]>;\n\n  /**\n   * Given a value, will return the SelectOption corresponding that value.\n   */\n  getValueOption(value: T): Observable>;\n\n  /**\n   * Returns `true` if this provider has a `SelectOption` that is linked to the given value.\n   */\n  hasOptionFor(value: T): Observable;\n}\n\nexport interface GetSelectOptionsParams {\n  counts?: Nil;\n  lang?: Nil;\n}\n\n/**\n * Merges multiple SelectOptionsProvider together to form a unified one.\n *\n * @deprectated\n */\nexport class SelectOptionsProvidersMerger implements SelectOptionsProvider {\n  constructor(private providers: SelectOptionsProvider[]) {}\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]> {\n    const obs = this.providers.map(provider => provider.getOptions(query, params));\n    return combineLatest(obs).pipe(map(allOptions => allOptions.reduce((acc, curr) => [...acc, ...curr], [])));\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getValueOption(value: T): Observable> {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value).pipe(map(hasOption => (hasOption ? provider : null)))),\n      filter(notNil),\n      first(),\n      switchMap(provider => provider.getValueOption(value)),\n      first()\n    );\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  hasOptionFor(value: T): Observable {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value)),\n      toArray(),\n      map(hasOptions => hasOptions.some(hasOption => hasOption))\n    );\n  }\n}\n\n/**\n * Represents a group SelectOption, might be useful when having grouped options in selects for example\n */\nexport interface SelectOptionGroup {\n  /**\n   * Label of the group\n   */\n  label?: SelectOptionLabel;\n\n  /**\n   * Options that are inside that group\n   */\n  options: SelectOption[];\n}\n\nexport function getAllSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOption[] {\n  const allOptions: SelectOption[] = [];\n  options.forEach(option => {\n    if ('value' in option) {\n      allOptions.push(option);\n    } else {\n      allOptions.push(...option.options);\n    }\n  });\n  return allOptions;\n}\n\nexport function groupSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOptionGroup[] {\n  const allGroups: SelectOptionGroup[] = [];\n  let lastDynamicGroup: SelectOptionGroup | undefined;\n  for (const option of options) {\n    if (isSelectOption(option)) {\n      if (!lastDynamicGroup) {\n        lastDynamicGroup = { options: [] };\n        allGroups.push(lastDynamicGroup);\n      }\n      lastDynamicGroup.options.push(option);\n    } else {\n      lastDynamicGroup = undefined;\n      allGroups.push(option);\n    }\n  }\n  return allGroups;\n}\n\nfunction isSelectOption(o: SelectOption | SelectOptionGroup): o is SelectOption {\n  return 'value' in o;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOptionCounts.html":{"url":"interfaces/SelectOptionCounts.html","title":"interface - SelectOptionCounts","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectOptionCounts\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/select-option.ts\n        \n\n\n            \n                Description\n            \n            \n                For consistency, this interface is to be used when needing to use counts for SelectOption\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [value: string]:        number\n\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/select-option.ts:39\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { combineLatest, from, Observable } from 'rxjs';\nimport { filter, first, map, mergeMap, switchMap, toArray } from 'rxjs/operators';\n\nimport { LangString, LangStringSimple } from './lang-string';\nimport { Nil, notNil } from './nil';\n\n/**\n * Kind of an augmented KeyValue type to be used whenever we have case where a\n * user has to select an option, being it in a select, an autocomplete, etc.\n * This is mostly there in an effort of consistency, to have interoperable libraries and data models.\n */\nexport interface SelectOption {\n  /**\n   * The value associated to the SelectOption. In a given set, this should be unique.\n   */\n  value: T;\n  /**\n   * The label, used for presentational purposes\n   */\n  label: SelectOptionLabel;\n  /**\n   * Set tu true if this option is disabled, useful when needing to display historical values.\n   */\n  disabled?: boolean;\n  /**\n   * Can store whatever, placeholder for library to put whatever they need here.\n   */\n  data?: {};\n}\n\n/**\n * The label of a {@link SelectOption}\n */\nexport type SelectOptionLabel = LangString | LangStringSimple | string;\n\n/**\n * For consistency, this interface is to be used when needing to use counts for {@link SelectOption}\n */\nexport interface SelectOptionCounts {\n  [value: string]: number;\n}\n\n/**\n * a TrackByFn to be used with an `*ngFor` in case it is used on an array of {@link SelectOption}\n */\nexport function trackBySelectOption(index: number, option: SelectOption): T {\n  return option.value;\n}\n\n/**\n * This will (naively) check that on the labels of the given option matches the query.\n */\nexport function selectOptionMatchQuery(option: SelectOption, query: Nil): boolean {\n  if (!query) return true;\n  const lowerQuery = query.toLowerCase();\n  const allLabels = [];\n  if (typeof option.label === 'string') {\n    allLabels.push(option.label);\n  } else {\n    Object.values(option.label).forEach(labels => allLabels.push(...labels));\n  }\n  return allLabels.some(label => label.toLowerCase().includes(lowerQuery));\n}\n\n/**\n * Any service or other that provides an array of SelectOption should implement this interface for consistency and interoperability.\n */\nexport interface SelectOptionsProvider {\n  /**\n   * Given the query, will return a filtered array of `SelectOption` that all matches.\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]>;\n\n  /**\n   * Given a value, will return the SelectOption corresponding that value.\n   */\n  getValueOption(value: T): Observable>;\n\n  /**\n   * Returns `true` if this provider has a `SelectOption` that is linked to the given value.\n   */\n  hasOptionFor(value: T): Observable;\n}\n\nexport interface GetSelectOptionsParams {\n  counts?: Nil;\n  lang?: Nil;\n}\n\n/**\n * Merges multiple SelectOptionsProvider together to form a unified one.\n *\n * @deprectated\n */\nexport class SelectOptionsProvidersMerger implements SelectOptionsProvider {\n  constructor(private providers: SelectOptionsProvider[]) {}\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]> {\n    const obs = this.providers.map(provider => provider.getOptions(query, params));\n    return combineLatest(obs).pipe(map(allOptions => allOptions.reduce((acc, curr) => [...acc, ...curr], [])));\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getValueOption(value: T): Observable> {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value).pipe(map(hasOption => (hasOption ? provider : null)))),\n      filter(notNil),\n      first(),\n      switchMap(provider => provider.getValueOption(value)),\n      first()\n    );\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  hasOptionFor(value: T): Observable {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value)),\n      toArray(),\n      map(hasOptions => hasOptions.some(hasOption => hasOption))\n    );\n  }\n}\n\n/**\n * Represents a group SelectOption, might be useful when having grouped options in selects for example\n */\nexport interface SelectOptionGroup {\n  /**\n   * Label of the group\n   */\n  label?: SelectOptionLabel;\n\n  /**\n   * Options that are inside that group\n   */\n  options: SelectOption[];\n}\n\nexport function getAllSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOption[] {\n  const allOptions: SelectOption[] = [];\n  options.forEach(option => {\n    if ('value' in option) {\n      allOptions.push(option);\n    } else {\n      allOptions.push(...option.options);\n    }\n  });\n  return allOptions;\n}\n\nexport function groupSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOptionGroup[] {\n  const allGroups: SelectOptionGroup[] = [];\n  let lastDynamicGroup: SelectOptionGroup | undefined;\n  for (const option of options) {\n    if (isSelectOption(option)) {\n      if (!lastDynamicGroup) {\n        lastDynamicGroup = { options: [] };\n        allGroups.push(lastDynamicGroup);\n      }\n      lastDynamicGroup.options.push(option);\n    } else {\n      lastDynamicGroup = undefined;\n      allGroups.push(option);\n    }\n  }\n  return allGroups;\n}\n\nfunction isSelectOption(o: SelectOption | SelectOptionGroup): o is SelectOption {\n  return 'value' in o;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOptionGroup.html":{"url":"interfaces/SelectOptionGroup.html","title":"interface - SelectOptionGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectOptionGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/select-option.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a group SelectOption, might be useful when having grouped options in selects for example\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         SelectOptionLabel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SelectOptionLabel\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Label of the group\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         SelectOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SelectOption[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Options that are inside that group\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { combineLatest, from, Observable } from 'rxjs';\nimport { filter, first, map, mergeMap, switchMap, toArray } from 'rxjs/operators';\n\nimport { LangString, LangStringSimple } from './lang-string';\nimport { Nil, notNil } from './nil';\n\n/**\n * Kind of an augmented KeyValue type to be used whenever we have case where a\n * user has to select an option, being it in a select, an autocomplete, etc.\n * This is mostly there in an effort of consistency, to have interoperable libraries and data models.\n */\nexport interface SelectOption {\n  /**\n   * The value associated to the SelectOption. In a given set, this should be unique.\n   */\n  value: T;\n  /**\n   * The label, used for presentational purposes\n   */\n  label: SelectOptionLabel;\n  /**\n   * Set tu true if this option is disabled, useful when needing to display historical values.\n   */\n  disabled?: boolean;\n  /**\n   * Can store whatever, placeholder for library to put whatever they need here.\n   */\n  data?: {};\n}\n\n/**\n * The label of a {@link SelectOption}\n */\nexport type SelectOptionLabel = LangString | LangStringSimple | string;\n\n/**\n * For consistency, this interface is to be used when needing to use counts for {@link SelectOption}\n */\nexport interface SelectOptionCounts {\n  [value: string]: number;\n}\n\n/**\n * a TrackByFn to be used with an `*ngFor` in case it is used on an array of {@link SelectOption}\n */\nexport function trackBySelectOption(index: number, option: SelectOption): T {\n  return option.value;\n}\n\n/**\n * This will (naively) check that on the labels of the given option matches the query.\n */\nexport function selectOptionMatchQuery(option: SelectOption, query: Nil): boolean {\n  if (!query) return true;\n  const lowerQuery = query.toLowerCase();\n  const allLabels = [];\n  if (typeof option.label === 'string') {\n    allLabels.push(option.label);\n  } else {\n    Object.values(option.label).forEach(labels => allLabels.push(...labels));\n  }\n  return allLabels.some(label => label.toLowerCase().includes(lowerQuery));\n}\n\n/**\n * Any service or other that provides an array of SelectOption should implement this interface for consistency and interoperability.\n */\nexport interface SelectOptionsProvider {\n  /**\n   * Given the query, will return a filtered array of `SelectOption` that all matches.\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]>;\n\n  /**\n   * Given a value, will return the SelectOption corresponding that value.\n   */\n  getValueOption(value: T): Observable>;\n\n  /**\n   * Returns `true` if this provider has a `SelectOption` that is linked to the given value.\n   */\n  hasOptionFor(value: T): Observable;\n}\n\nexport interface GetSelectOptionsParams {\n  counts?: Nil;\n  lang?: Nil;\n}\n\n/**\n * Merges multiple SelectOptionsProvider together to form a unified one.\n *\n * @deprectated\n */\nexport class SelectOptionsProvidersMerger implements SelectOptionsProvider {\n  constructor(private providers: SelectOptionsProvider[]) {}\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]> {\n    const obs = this.providers.map(provider => provider.getOptions(query, params));\n    return combineLatest(obs).pipe(map(allOptions => allOptions.reduce((acc, curr) => [...acc, ...curr], [])));\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getValueOption(value: T): Observable> {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value).pipe(map(hasOption => (hasOption ? provider : null)))),\n      filter(notNil),\n      first(),\n      switchMap(provider => provider.getValueOption(value)),\n      first()\n    );\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  hasOptionFor(value: T): Observable {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value)),\n      toArray(),\n      map(hasOptions => hasOptions.some(hasOption => hasOption))\n    );\n  }\n}\n\n/**\n * Represents a group SelectOption, might be useful when having grouped options in selects for example\n */\nexport interface SelectOptionGroup {\n  /**\n   * Label of the group\n   */\n  label?: SelectOptionLabel;\n\n  /**\n   * Options that are inside that group\n   */\n  options: SelectOption[];\n}\n\nexport function getAllSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOption[] {\n  const allOptions: SelectOption[] = [];\n  options.forEach(option => {\n    if ('value' in option) {\n      allOptions.push(option);\n    } else {\n      allOptions.push(...option.options);\n    }\n  });\n  return allOptions;\n}\n\nexport function groupSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOptionGroup[] {\n  const allGroups: SelectOptionGroup[] = [];\n  let lastDynamicGroup: SelectOptionGroup | undefined;\n  for (const option of options) {\n    if (isSelectOption(option)) {\n      if (!lastDynamicGroup) {\n        lastDynamicGroup = { options: [] };\n        allGroups.push(lastDynamicGroup);\n      }\n      lastDynamicGroup.options.push(option);\n    } else {\n      lastDynamicGroup = undefined;\n      allGroups.push(option);\n    }\n  }\n  return allGroups;\n}\n\nfunction isSelectOption(o: SelectOption | SelectOptionGroup): o is SelectOption {\n  return 'value' in o;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOptionsProvider.html":{"url":"interfaces/SelectOptionsProvider.html","title":"interface - SelectOptionsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectOptionsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/select-option.ts\n        \n\n\n            \n                Description\n            \n            \n                Any service or other that provides an array of SelectOption should implement this interface for consistency and interoperability.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getOptions\n                                    \n                                \n                                \n                                    \n                                        getValueOption\n                                    \n                                \n                                \n                                    \n                                        hasOptionFor\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getOptions\n                        \n                    \n                \n            \n            \n                \ngetOptions(query: Nil, params: GetSelectOptionsParams)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/select-option.ts:72\n                \n            \n\n\n            \n                \n                    Given the query, will return a filtered array of SelectOption that all matches.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Nil\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                                GetSelectOptionsParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValueOption\n                        \n                    \n                \n            \n            \n                \ngetValueOption(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/select-option.ts:77\n                \n            \n\n\n            \n                \n                    Given a value, will return the SelectOption corresponding that value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasOptionFor\n                        \n                    \n                \n            \n            \n                \nhasOptionFor(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/select-option.ts:82\n                \n            \n\n\n            \n                \n                    Returns true if this provider has a SelectOption that is linked to the given value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { combineLatest, from, Observable } from 'rxjs';\nimport { filter, first, map, mergeMap, switchMap, toArray } from 'rxjs/operators';\n\nimport { LangString, LangStringSimple } from './lang-string';\nimport { Nil, notNil } from './nil';\n\n/**\n * Kind of an augmented KeyValue type to be used whenever we have case where a\n * user has to select an option, being it in a select, an autocomplete, etc.\n * This is mostly there in an effort of consistency, to have interoperable libraries and data models.\n */\nexport interface SelectOption {\n  /**\n   * The value associated to the SelectOption. In a given set, this should be unique.\n   */\n  value: T;\n  /**\n   * The label, used for presentational purposes\n   */\n  label: SelectOptionLabel;\n  /**\n   * Set tu true if this option is disabled, useful when needing to display historical values.\n   */\n  disabled?: boolean;\n  /**\n   * Can store whatever, placeholder for library to put whatever they need here.\n   */\n  data?: {};\n}\n\n/**\n * The label of a {@link SelectOption}\n */\nexport type SelectOptionLabel = LangString | LangStringSimple | string;\n\n/**\n * For consistency, this interface is to be used when needing to use counts for {@link SelectOption}\n */\nexport interface SelectOptionCounts {\n  [value: string]: number;\n}\n\n/**\n * a TrackByFn to be used with an `*ngFor` in case it is used on an array of {@link SelectOption}\n */\nexport function trackBySelectOption(index: number, option: SelectOption): T {\n  return option.value;\n}\n\n/**\n * This will (naively) check that on the labels of the given option matches the query.\n */\nexport function selectOptionMatchQuery(option: SelectOption, query: Nil): boolean {\n  if (!query) return true;\n  const lowerQuery = query.toLowerCase();\n  const allLabels = [];\n  if (typeof option.label === 'string') {\n    allLabels.push(option.label);\n  } else {\n    Object.values(option.label).forEach(labels => allLabels.push(...labels));\n  }\n  return allLabels.some(label => label.toLowerCase().includes(lowerQuery));\n}\n\n/**\n * Any service or other that provides an array of SelectOption should implement this interface for consistency and interoperability.\n */\nexport interface SelectOptionsProvider {\n  /**\n   * Given the query, will return a filtered array of `SelectOption` that all matches.\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]>;\n\n  /**\n   * Given a value, will return the SelectOption corresponding that value.\n   */\n  getValueOption(value: T): Observable>;\n\n  /**\n   * Returns `true` if this provider has a `SelectOption` that is linked to the given value.\n   */\n  hasOptionFor(value: T): Observable;\n}\n\nexport interface GetSelectOptionsParams {\n  counts?: Nil;\n  lang?: Nil;\n}\n\n/**\n * Merges multiple SelectOptionsProvider together to form a unified one.\n *\n * @deprectated\n */\nexport class SelectOptionsProvidersMerger implements SelectOptionsProvider {\n  constructor(private providers: SelectOptionsProvider[]) {}\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]> {\n    const obs = this.providers.map(provider => provider.getOptions(query, params));\n    return combineLatest(obs).pipe(map(allOptions => allOptions.reduce((acc, curr) => [...acc, ...curr], [])));\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getValueOption(value: T): Observable> {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value).pipe(map(hasOption => (hasOption ? provider : null)))),\n      filter(notNil),\n      first(),\n      switchMap(provider => provider.getValueOption(value)),\n      first()\n    );\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  hasOptionFor(value: T): Observable {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value)),\n      toArray(),\n      map(hasOptions => hasOptions.some(hasOption => hasOption))\n    );\n  }\n}\n\n/**\n * Represents a group SelectOption, might be useful when having grouped options in selects for example\n */\nexport interface SelectOptionGroup {\n  /**\n   * Label of the group\n   */\n  label?: SelectOptionLabel;\n\n  /**\n   * Options that are inside that group\n   */\n  options: SelectOption[];\n}\n\nexport function getAllSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOption[] {\n  const allOptions: SelectOption[] = [];\n  options.forEach(option => {\n    if ('value' in option) {\n      allOptions.push(option);\n    } else {\n      allOptions.push(...option.options);\n    }\n  });\n  return allOptions;\n}\n\nexport function groupSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOptionGroup[] {\n  const allGroups: SelectOptionGroup[] = [];\n  let lastDynamicGroup: SelectOptionGroup | undefined;\n  for (const option of options) {\n    if (isSelectOption(option)) {\n      if (!lastDynamicGroup) {\n        lastDynamicGroup = { options: [] };\n        allGroups.push(lastDynamicGroup);\n      }\n      lastDynamicGroup.options.push(option);\n    } else {\n      lastDynamicGroup = undefined;\n      allGroups.push(option);\n    }\n  }\n  return allGroups;\n}\n\nfunction isSelectOption(o: SelectOption | SelectOptionGroup): o is SelectOption {\n  return 'value' in o;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectOptionsProvidersMerger.html":{"url":"classes/SelectOptionsProvidersMerger.html","title":"class - SelectOptionsProvidersMerger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectOptionsProvidersMerger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/select-option.ts\n        \n\n\n            \n                Description\n            \n            \n                Merges multiple SelectOptionsProvider together to form a unified one.\n\n            \n\n\n            \n                Implements\n            \n            \n                            SelectOptionsProvider\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getOptions\n                            \n                            \n                                getValueOption\n                            \n                            \n                                hasOptionFor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(providers: SelectOptionsProvider[])\n                    \n                \n                        \n                            \n                                Defined in src/lib/models/select-option.ts:95\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        providers\n                                                  \n                                                        \n                                                                    SelectOptionsProvider[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getOptions\n                        \n                    \n                \n            \n            \n                \ngetOptions(query: Nil, params: GetSelectOptionsParams)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/select-option.ts:101\n                \n            \n\n\n            \n                \n                    see SelectOptionsProvider\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Nil\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                                GetSelectOptionsParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getValueOption\n                        \n                    \n                \n            \n            \n                \ngetValueOption(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/select-option.ts:109\n                \n            \n\n\n            \n                \n                    see SelectOptionsProvider\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasOptionFor\n                        \n                    \n                \n            \n            \n                \nhasOptionFor(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/select-option.ts:122\n                \n            \n\n\n            \n                \n                    see SelectOptionsProvider\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { combineLatest, from, Observable } from 'rxjs';\nimport { filter, first, map, mergeMap, switchMap, toArray } from 'rxjs/operators';\n\nimport { LangString, LangStringSimple } from './lang-string';\nimport { Nil, notNil } from './nil';\n\n/**\n * Kind of an augmented KeyValue type to be used whenever we have case where a\n * user has to select an option, being it in a select, an autocomplete, etc.\n * This is mostly there in an effort of consistency, to have interoperable libraries and data models.\n */\nexport interface SelectOption {\n  /**\n   * The value associated to the SelectOption. In a given set, this should be unique.\n   */\n  value: T;\n  /**\n   * The label, used for presentational purposes\n   */\n  label: SelectOptionLabel;\n  /**\n   * Set tu true if this option is disabled, useful when needing to display historical values.\n   */\n  disabled?: boolean;\n  /**\n   * Can store whatever, placeholder for library to put whatever they need here.\n   */\n  data?: {};\n}\n\n/**\n * The label of a {@link SelectOption}\n */\nexport type SelectOptionLabel = LangString | LangStringSimple | string;\n\n/**\n * For consistency, this interface is to be used when needing to use counts for {@link SelectOption}\n */\nexport interface SelectOptionCounts {\n  [value: string]: number;\n}\n\n/**\n * a TrackByFn to be used with an `*ngFor` in case it is used on an array of {@link SelectOption}\n */\nexport function trackBySelectOption(index: number, option: SelectOption): T {\n  return option.value;\n}\n\n/**\n * This will (naively) check that on the labels of the given option matches the query.\n */\nexport function selectOptionMatchQuery(option: SelectOption, query: Nil): boolean {\n  if (!query) return true;\n  const lowerQuery = query.toLowerCase();\n  const allLabels = [];\n  if (typeof option.label === 'string') {\n    allLabels.push(option.label);\n  } else {\n    Object.values(option.label).forEach(labels => allLabels.push(...labels));\n  }\n  return allLabels.some(label => label.toLowerCase().includes(lowerQuery));\n}\n\n/**\n * Any service or other that provides an array of SelectOption should implement this interface for consistency and interoperability.\n */\nexport interface SelectOptionsProvider {\n  /**\n   * Given the query, will return a filtered array of `SelectOption` that all matches.\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]>;\n\n  /**\n   * Given a value, will return the SelectOption corresponding that value.\n   */\n  getValueOption(value: T): Observable>;\n\n  /**\n   * Returns `true` if this provider has a `SelectOption` that is linked to the given value.\n   */\n  hasOptionFor(value: T): Observable;\n}\n\nexport interface GetSelectOptionsParams {\n  counts?: Nil;\n  lang?: Nil;\n}\n\n/**\n * Merges multiple SelectOptionsProvider together to form a unified one.\n *\n * @deprectated\n */\nexport class SelectOptionsProvidersMerger implements SelectOptionsProvider {\n  constructor(private providers: SelectOptionsProvider[]) {}\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getOptions(query: Nil, params: GetSelectOptionsParams): Observable | SelectOptionGroup)[]> {\n    const obs = this.providers.map(provider => provider.getOptions(query, params));\n    return combineLatest(obs).pipe(map(allOptions => allOptions.reduce((acc, curr) => [...acc, ...curr], [])));\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  getValueOption(value: T): Observable> {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value).pipe(map(hasOption => (hasOption ? provider : null)))),\n      filter(notNil),\n      first(),\n      switchMap(provider => provider.getValueOption(value)),\n      first()\n    );\n  }\n\n  /**\n   * see {@link SelectOptionsProvider}\n   */\n  hasOptionFor(value: T): Observable {\n    return from(this.providers).pipe(\n      mergeMap(provider => provider.hasOptionFor(value)),\n      toArray(),\n      map(hasOptions => hasOptions.some(hasOption => hasOption))\n    );\n  }\n}\n\n/**\n * Represents a group SelectOption, might be useful when having grouped options in selects for example\n */\nexport interface SelectOptionGroup {\n  /**\n   * Label of the group\n   */\n  label?: SelectOptionLabel;\n\n  /**\n   * Options that are inside that group\n   */\n  options: SelectOption[];\n}\n\nexport function getAllSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOption[] {\n  const allOptions: SelectOption[] = [];\n  options.forEach(option => {\n    if ('value' in option) {\n      allOptions.push(option);\n    } else {\n      allOptions.push(...option.options);\n    }\n  });\n  return allOptions;\n}\n\nexport function groupSelectOptions(options: (SelectOption | SelectOptionGroup)[]): SelectOptionGroup[] {\n  const allGroups: SelectOptionGroup[] = [];\n  let lastDynamicGroup: SelectOptionGroup | undefined;\n  for (const option of options) {\n    if (isSelectOption(option)) {\n      if (!lastDynamicGroup) {\n        lastDynamicGroup = { options: [] };\n        allGroups.push(lastDynamicGroup);\n      }\n      lastDynamicGroup.options.push(option);\n    } else {\n      lastDynamicGroup = undefined;\n      allGroups.push(option);\n    }\n  }\n  return allGroups;\n}\n\nfunction isSelectOption(o: SelectOption | SelectOptionGroup): o is SelectOption {\n  return 'value' in o;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubSink.html":{"url":"classes/SubSink.html","title":"class - SubSink","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubSink\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/models/sub-sink.ts\n        \n\n\n            \n                Description\n            \n            \n                Utility class used for handling rxjs subscription in a gracefull manner.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                empty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    add\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        empty\n                        \n                    \n                \n            \n            \n                \nempty()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/models/sub-sink.ts:23\n                \n            \n\n\n            \n                \n                    Unsuscribe from all the added subscriptions and empties the internal pool.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        add\n                    \n                \n\n\n                \n                    \n                        setadd(value: Subscription)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/models/sub-sink.ts:16\n                                \n                            \n                    \n                        \n                                Add a subscription to the pool of subscriptions. multiple calls can be made in succession, like\nmySubSink = timer(500).subscribe();\nmySubSink = timer(1000).subscribe();.\nThis was done to avoid having to wrap a subscription in a method call, like\nmySubSink.addInArray(timer(1000).subscribe());\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                        Subscription\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { Subscription } from 'rxjs';\n\n/**\n * Utility class used for handling rxjs subscription in a gracefull manner.\n */\nexport class SubSink {\n  private subscriptions: Subscription[] = [];\n\n  /**\n   * Add a subscription to the pool of subscriptions. multiple calls can be made in succession, like\n   * `mySubSink = timer(500).subscribe();`\n   * `mySubSink = timer(1000).subscribe();`.\n   * This was done to avoid having to wrap a subscription in a method call, like\n   * `mySubSink.addInArray(timer(1000).subscribe());`\n   */\n  set add(value: Subscription) {\n    this.subscriptions.push(value);\n  }\n\n  /**\n   * Unsuscribe from all the added subscriptions and empties the internal pool.\n   */\n  empty(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions = [];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nThis file was generated using @jscutlery/semver.\n0.0.1 (2021-07-12)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/models/completable.ts\n            \n            function\n            completableToObservable\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/completable.ts\n            \n            function\n            completableToPromise\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/completable.ts\n            \n            variable\n            awaitForCompletable\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/cz-label.ts\n            \n            function\n            czLabelToString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/elastic-query.ts\n            \n            interface\n            ElasticQuery\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/lib/models/elastic-query.ts\n            \n            function\n            createElasticQuery\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/elastic-response.ts\n            \n            interface\n            ElasticAggregation\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/lib/models/elastic-response.ts\n            \n            interface\n            ElasticBucket\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/lib/models/elastic-response.ts\n            \n            interface\n            ElasticHit\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/lib/models/elastic-response.ts\n            \n            interface\n            ElasticSearchResponse\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/lib/models/elastic-response.ts\n            \n            function\n            extractOneSourceFromElasticResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/elastic-response.ts\n            \n            function\n            extractSourcesFromElasticResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/elastic-response.ts\n            \n            function\n            mapElasticSources\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/lang-string.ts\n            \n            interface\n            LangString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/lang-string.ts\n            \n            interface\n            LangStringSimple\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/lang-string.ts\n            \n            function\n            getLangStringValue\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/many.ts\n            \n            function\n            manyToArray\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/many.ts\n            \n            function\n            manyToOne\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/nil.ts\n            \n            function\n            notNil\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/pagination.ts\n            \n            interface\n            Pagination\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/models/select-option.ts\n            \n            class\n            SelectOptionsProvidersMerger\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/lib/models/select-option.ts\n            \n            interface\n            GetSelectOptionsParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/models/select-option.ts\n            \n            interface\n            SelectOption\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/models/select-option.ts\n            \n            interface\n            SelectOptionCounts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/select-option.ts\n            \n            interface\n            SelectOptionGroup\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/models/select-option.ts\n            \n            interface\n            SelectOptionsProvider\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/models/select-option.ts\n            \n            function\n            getAllSelectOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/models/select-option.ts\n            \n            function\n            groupSelectOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/models/select-option.ts\n            \n            function\n            isSelectOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/models/select-option.ts\n            \n            function\n            selectOptionMatchQuery\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/select-option.ts\n            \n            function\n            trackBySelectOption\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/models/sub-sink.ts\n            \n            class\n            SubSink\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/operators/debounce-sync.ts\n            \n            function\n            debounceSync\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/operators/or-else.ts\n            \n            function\n            orElse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/operators/select-prop.ts\n            \n            function\n            selectProp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/utils/date-to-date-string.ts\n            \n            function\n            dateToDateString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/utils/download-blob.ts\n            \n            function\n            downloadBlob\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/utils/get-all-properties.ts\n            \n            function\n            getAllProperties\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/utils/strict-entries.ts\n            \n            function\n            strictEntries\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            rxjs : ^6.5.0\n        \n            typescript : >=3.7.0 \n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            completableToObservable   (src/.../completable.ts)\n                        \n                        \n                            completableToPromise   (src/.../completable.ts)\n                        \n                        \n                            createElasticQuery   (src/.../elastic-query.ts)\n                        \n                        \n                            czLabelToString   (src/.../cz-label.ts)\n                        \n                        \n                            dateToDateString   (src/.../date-to-date-string.ts)\n                        \n                        \n                            debounceSync   (src/.../debounce-sync.ts)\n                        \n                        \n                            downloadBlob   (src/.../download-blob.ts)\n                        \n                        \n                            extractOneSourceFromElasticResponse   (src/.../elastic-response.ts)\n                        \n                        \n                            extractSourcesFromElasticResponse   (src/.../elastic-response.ts)\n                        \n                        \n                            getAllProperties   (src/.../get-all-properties.ts)\n                        \n                        \n                            getAllSelectOptions   (src/.../select-option.ts)\n                        \n                        \n                            getLangStringValue   (src/.../lang-string.ts)\n                        \n                        \n                            groupSelectOptions   (src/.../select-option.ts)\n                        \n                        \n                            isSelectOption   (src/.../select-option.ts)\n                        \n                        \n                            manyToArray   (src/.../many.ts)\n                        \n                        \n                            manyToOne   (src/.../many.ts)\n                        \n                        \n                            mapElasticSources   (src/.../elastic-response.ts)\n                        \n                        \n                            notNil   (src/.../nil.ts)\n                        \n                        \n                            orElse   (src/.../or-else.ts)\n                        \n                        \n                            selectOptionMatchQuery   (src/.../select-option.ts)\n                        \n                        \n                            selectProp   (src/.../select-prop.ts)\n                        \n                        \n                            strictEntries   (src/.../strict-entries.ts)\n                        \n                        \n                            trackBySelectOption   (src/.../select-option.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/completable.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        completableToObservable\n                        \n                    \n                \n            \n            \n                \ncompletableToObservable(resource)\n                \n            \n\n\n\n\n            \n                \n                    Convert a Completable to an Observable\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    resource\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Completable to be transformed into an Observable.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        resource as an Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        completableToPromise\n                        \n                    \n                \n            \n            \n                \ncompletableToPromise(resource)\n                \n            \n\n\n\n\n            \n                \n                    Convert a Completable to a Promise\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    resource\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The Completable to be transformed into a Promise. For\nease of use, if it is an Observable, it is piped with first()\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        resource as a Promise\n\n                    \n                \n            \n        \n    \n    src/lib/models/elastic-query.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createElasticQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                \n            \n            \n                \ncreateElasticQuery()\n                \n            \n\n\n\n\n            \n                \n                    Create a basic structure for an ElasticQuery\n\n\n                    \n                        Returns :         ElasticQuery\n\n                    \n                \n            \n        \n    \n    src/lib/models/cz-label.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        czLabelToString\n                        \n                    \n                \n            \n            \n                \nczLabelToString(label, lang, fallbackLangs)\n                \n            \n\n\n\n\n            \n                \n                    same as getLangStringValue but also return label as-is if it's already a string\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    label\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fallbackLangs\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/utils/date-to-date-string.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dateToDateString\n                        \n                    \n                \n            \n            \n                \ndateToDateString(value)\n                \n            \n\n\n\n\n            \n                \n                    Returns the given Date as a string in the YYYY-MM-dd format\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/operators/debounce-sync.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        debounceSync\n                        \n                    \n                \n            \n            \n                \ndebounceSync()\n                \n            \n\n\n\n\n            \n                \n                    rxjs operator to be used for debouncing the source in a synchronous way\n\n\n                    \n                        Returns :     MonoTypeOperatorFunction\n\n                    \n                \n            \n        \n    \n    src/lib/utils/download-blob.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        downloadBlob\n                        \n                    \n                \n            \n            \n                \ndownloadBlob(data, fileName?)\n                \n            \n\n\n\n\n            \n                \n                    Triggers a browser download of the given Blob, and should be cross-browser compatible (looking at you IE).\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileName\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/models/elastic-response.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        extractOneSourceFromElasticResponse\n                        \n                    \n                \n            \n            \n                \nextractOneSourceFromElasticResponse(response)\n                \n            \n\n\n\n\n            \n                \n                    Extract the first _source of the first hits of an ElasticResponse\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The json returned by a _search elastic call\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        extractSourcesFromElasticResponse\n                        \n                    \n                \n            \n            \n                \nextractSourcesFromElasticResponse(response)\n                \n            \n\n\n\n\n            \n                \n                    Aggregate all _source in all hits of an ElasticResponse in a single array\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The json returned by a _search elastic call\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapElasticSources\n                        \n                    \n                \n            \n            \n                \nmapElasticSources(response, project)\n                \n            \n\n\n\n\n            \n                \n                    Return a transformed ElasticResponse where all _source are transformed using the given project function\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The json returned by a _search elastic call\n\n                                    \n                                \n                                \n                                    project\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The projection function\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ElasticSearchResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/utils/get-all-properties.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAllProperties\n                        \n                    \n                \n            \n            \n                \ngetAllProperties(obj)\n                \n            \n\n\n\n\n            \n                \n                    get all properties of the given object, and goes of the prototype chain. This\nis mostly useful for debugging purposes and javascript digging.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    obj\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/models/select-option.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAllSelectOptions\n                        \n                    \n                \n            \n            \n                \ngetAllSelectOptions(options)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectOption[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        groupSelectOptions\n                        \n                    \n                \n            \n            \n                \ngroupSelectOptions(options)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SelectOptionGroup[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSelectOption\n                        \n                    \n                \n            \n            \n                \nisSelectOption(o)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectOption\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectOptionMatchQuery\n                        \n                    \n                \n            \n            \n                \nselectOptionMatchQuery(option, query)\n                \n            \n\n\n\n\n            \n                \n                    This will (naively) check that on the labels of the given option matches the query.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    option\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trackBySelectOption\n                        \n                    \n                \n            \n            \n                \ntrackBySelectOption(index, option)\n                \n            \n\n\n\n\n            \n                \n                    a TrackByFn to be used with an *ngFor in case it is used on an array of SelectOption\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    option\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/models/lang-string.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLangStringValue\n                        \n                    \n                \n            \n            \n                \ngetLangStringValue(langString, lang, fallbackLangs)\n                \n            \n\n\n\n\n            \n                \n                    Extract from a LangString the label in a corresponding lang. If not\nfound, it will try extract the label of one of the fallback languages.\nIf even there nothing is found, it will fallback to the first label found.\nIt is to be noted that even if the label is a string[] with multiple values,\nonly the 0th element will be taken.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    langString\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The lang string from which we want to extract a label\n\n                                    \n                                \n                                \n                                    lang\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The preferred lang to get the label for\n\n                                    \n                                \n                                \n                                    fallbackLangs\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ordered list of fallback languages\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/models/many.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        manyToArray\n                        \n                    \n                \n            \n            \n                \nmanyToArray(x)\n                \n            \n\n\n\n\n            \n                \n                    Convert a Many to an array. Beware that it is nullish-safe, so you could end up with [undefined].\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        manyToOne\n                        \n                    \n                \n            \n            \n                \nmanyToOne(x)\n                \n            \n\n\n\n\n            \n                \n                    Convert a Many to its base type, taking the 0th element of the array if applicable.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/models/nil.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        notNil\n                        \n                    \n                \n            \n            \n                \nnotNil(o)\n                \n            \n\n\n\n\n            \n                \n                    Checking that the argument is not Nil, so basically o != null. Its\nmain usage is to be used in array filtering or rxjs stream filtering. For example\nconst myStringArray = ['a', undefined, null, 'b'].filter(notNil);\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Exclude\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/operators/or-else.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        orElse\n                        \n                    \n                \n            \n            \n                \norElse(value)\n                \n            \n\n\n\n\n            \n                \n                    rxjs operator to be used for defaulting to a given value if the stream passes a nullish value. For example:\nfrom(['a', undefined, 'c']).pipe(orElse('b')).subscribe(console.log) will log 'a' 'b' 'c'.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OperatorFunction\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/operators/select-prop.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        selectProp\n                        \n                    \n                \n            \n            \n                \nselectProp(key)\n                \n            \n\n\n\n\n            \n                \n                    Simply take the key property of the obecjt going trhough the stream, and applyting a distinctUntilChanged right after.\nThis is mostly used for selecting parts of a reactive state. (Like we mostly do with ngxs)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OperatorFunction\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/utils/strict-entries.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        strictEntries\n                        \n                    \n                \n            \n            \n                \nstrictEntries(o)\n                \n            \n\n\n\n\n            \n                \n                    Same as Object.entries, but strongly typed\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    o\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nmodel-utils\nThis library was generated with Nx.\nRunning unit tests\nRun nx test model-utils to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    13 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnyObject   (src/.../any-object.ts)\n                        \n                        \n                            Completable   (src/.../completable.ts)\n                        \n                        \n                            CzLabel   (src/.../cz-label.ts)\n                        \n                        \n                            Dictionary   (src/.../dictionary.ts)\n                        \n                        \n                            Many   (src/.../many.ts)\n                        \n                        \n                            Nil   (src/.../nil.ts)\n                        \n                        \n                            SelectOptionLabel   (src/.../select-option.ts)\n                        \n                        \n                            Sorter   (src/.../sorter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/any-object.ts\n    \n    \n        \n            \n                \n                    \n                    AnyObject\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    src/lib/models/completable.ts\n    \n    \n        \n            \n                \n                    \n                    Completable\n                \n            \n            \n                \n                    The Completable type represents a resource that should \"complete\" in the\nObservable sense. A Completable is either directly the generic type given, a Promise that returns that type or an\nObservable that does the same.\n\n                \n            \n            \n                \n                        Observable | Promise | T\n\n                \n            \n        \n    \n    src/lib/models/cz-label.ts\n    \n    \n        \n            \n                \n                    \n                    CzLabel\n                \n            \n            \n                \n                    Union type that encompass all the usual types we use for labels\n\n                \n            \n            \n                \n                        LangString | LangStringSimple | string\n\n                \n            \n        \n    \n    src/lib/models/dictionary.ts\n    \n    \n        \n            \n                \n                    \n                    Dictionary\n                \n            \n            \n                \n                    A shorthand for indexed object with string as keys\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/models/many.ts\n    \n    \n        \n            \n                \n                    \n                    Many\n                \n            \n            \n                \n                    A shorthand to specify if it's either the given type or an array of it\n\n                \n            \n            \n                \n                        T | T[]\n\n                \n            \n        \n    \n    src/lib/models/nil.ts\n    \n    \n        \n            \n                \n                    \n                    Nil\n                \n            \n            \n                \n                    Shorthand type for type being either itself, null or undefined\n\n                \n            \n            \n                \n                        T | null | undefined\n\n                \n            \n        \n    \n    src/lib/models/select-option.ts\n    \n    \n        \n            \n                \n                    \n                    SelectOptionLabel\n                \n            \n            \n                \n                    The label of a SelectOption\n\n                \n            \n            \n                \n                        LangString | LangStringSimple | string\n\n                \n            \n        \n    \n    src/lib/models/sorter.ts\n    \n    \n        \n            \n                \n                    \n                    Sorter\n                \n            \n            \n                \n                    Describes a function to be used as argument for Array::sort\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            awaitForCompletable   (src/.../completable.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/models/completable.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        awaitForCompletable\n                        \n                    \n                \n            \n            \n                \n                    use `completableToPromise` instead\n                \n            \n                \n                    \n                        Default value : completableToPromise\n                    \n                \n\n            \n                \n                    This is deprecated, use completableToPromise instead\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
