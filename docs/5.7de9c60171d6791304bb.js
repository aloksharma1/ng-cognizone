(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{wT7u:function(e,t,o){"use strict";o.r(t),o.d(t,"ArchitectureModule",function(){return N});var n=o("SVse"),a=o("EHqz"),s=o("iInd"),i=o("1v6f"),r=o("n2+w"),c=o("8Y7J");let l=(()=>{class e{constructor(e){this.coreStateFacade=e}ngOnInit(){this.coreStateFacade.setPages([{label:"01 Getting started",path:"architecture/getting-started"},{label:"02 Modules",path:"architecture/global-architecture"},{label:"03 Env, apis and flags",path:"architecture/env-apis-and-flags"},{label:"04 Styling",path:"architecture/styling"},...Object(r.g)(i.a.features.architecture.component,{label:"05 Components",path:"architecture/components"}),...Object(r.g)(i.a.features.architecture.forms,{label:"06 Forms",path:"architecture/forms"})])}ngOnDestroy(){this.coreStateFacade.setPages([])}}return e.\u0275fac=function(t){return new(t||e)(c.Pb(r.b))},e.\u0275cmp=c.Jb({type:e,selectors:[["app-architecture"]],decls:2,vars:0,template:function(e,t){1&e&&(c.Vb(0,"main"),c.Qb(1,"router-outlet"),c.Ub())},directives:[s.h],styles:[""]}),e})();var p=o("s7LF"),b=o("k2Z3"),u=o("UxgT"),d=o("pmVS"),h=o("shPZ"),m=o("orUY"),g=o("DpR9"),f=o("8bSS"),y=o("PDjf"),B=o("Q2Ze"),U=o("e6WT"),w=o("VDRc"),V=o("Dxy4");let v=(()=>{class e{constructor(){this.templateEvaluations=0}getDouble(e){return++this.templateEvaluations,2*e}onButtonClick(){}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=c.Jb({type:e,selectors:[["app-cd-default"]],inputs:{number:"number"},decls:13,vars:3,consts:[["mat-button","",3,"click"]],template:function(e,t){1&e&&(c.Vb(0,"mat-card"),c.Vb(1,"mat-card-title"),c.Bc(2,"C1"),c.Ub(),c.Vb(3,"mat-card-subtitle"),c.Bc(4,"Default change detection"),c.Ub(),c.Vb(5,"mat-card-content"),c.Vb(6,"p"),c.Bc(7),c.Ub(),c.Vb(8,"p"),c.Bc(9),c.Ub(),c.Ub(),c.Vb(10,"mat-card-actions"),c.Vb(11,"button",0),c.dc("click",function(){return t.onButtonClick()}),c.Bc(12,"CLICK"),c.Ub(),c.Ub(),c.Ub()),2&e&&(c.Fb(7),c.Ec("Double of ",t.number," is ",t.getDouble(t.number),"."),c.Fb(2),c.Dc("Number of template evaluations: ",t.templateEvaluations,""))},directives:[y.a,y.h,y.g,y.c,y.b,V.b],styles:[""]}),e})(),k=(()=>{class e extends v{}return e.\u0275fac=function(t){return x(t||e)},e.\u0275cmp=c.Jb({type:e,selectors:[["app-cd-on-push"]],features:[c.Cb],decls:13,vars:3,consts:[["mat-button","",3,"click"]],template:function(e,t){1&e&&(c.Vb(0,"mat-card"),c.Vb(1,"mat-card-title"),c.Bc(2,"C2"),c.Ub(),c.Vb(3,"mat-card-subtitle"),c.Bc(4,"OnPush change detection"),c.Ub(),c.Vb(5,"mat-card-content"),c.Vb(6,"p"),c.Bc(7),c.Ub(),c.Vb(8,"p"),c.Bc(9),c.Ub(),c.Ub(),c.Vb(10,"mat-card-actions"),c.Vb(11,"button",0),c.dc("click",function(){return t.onButtonClick()}),c.Bc(12,"CLICK"),c.Ub(),c.Ub(),c.Ub()),2&e&&(c.Fb(7),c.Ec("Double of ",t.number," is ",t.getDouble(t.number),"."),c.Fb(2),c.Dc("Number of template evaluations: ",t.templateEvaluations,""))},directives:[y.a,y.h,y.g,y.c,y.b,V.b],styles:[""],changeDetection:0}),e})();const x=c.Xb(k);var C=o("l5mm"),M=o("lJxs");function I(e,t){if(1&e&&(c.Vb(0,"mat-card-content"),c.Bc(1),c.Ub()),2&e){const e=t.ngIf,o=c.gc();c.Fb(1),c.Fc(" Double of ",e," is ",o.getDouble(e),". Number of template evaluations: ",o.templateEvaluations," ")}}let T=(()=>{class e{constructor(){this.number$=Object(C.a)(1e3).pipe(Object(M.a)(e=>`${e}`)),this.templateEvaluations=0}getDouble(e){return++this.templateEvaluations,2*e}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=c.Jb({type:e,selectors:[["app-on-push-async-pipe"]],decls:7,vars:3,consts:[[4,"ngIf"]],template:function(e,t){1&e&&(c.Vb(0,"mat-card"),c.Vb(1,"mat-card-title"),c.Bc(2,"C3"),c.Ub(),c.Vb(3,"mat-card-subtitle"),c.Bc(4,"OnPush change detection with interval inside triggering every second"),c.Ub(),c.zc(5,I,2,3,"mat-card-content",0),c.hc(6,"async"),c.Ub()),2&e&&(c.Fb(5),c.lc("ngIf",c.ic(6,1,t.number$)))},directives:[y.a,y.h,y.g,n.l,y.c],pipes:[n.b],styles:[""],changeDetection:0}),e})();function S(e,t){1&e&&c.Qb(0,"app-on-push-async-pipe")}let j=(()=>{class e{constructor(){this.lastUpdate=new Date("2019-11-25"),this.numberControl=new p.e(2),this.showIntervalComponent=!1,this.catExample="\n  // cats.component.ts\n  @Component(/*...*/)\n  class CatsComponent {\n    cats$: Observable<Cat[]>;\n    \n    ageMin: number;\n    ageMax: number;\n    constructor(private catService: CatService) {}\n\n    fetchCats(): void {\n      this.cats$ = this.catService.search({age: {min: this.ageMin, max: this.ageMax}});\n    }\n  }\n\n  // cat.service.ts\n  @Injectable({ providedIn: 'root' })\n  class CatService {\n    private readonly url: string = `${environment.api}/cats`;\n\n    constructor(private http: HttpClient) {}\n\n    search(filter: {age: {min: number, max: number}}): Observable<Cat[]> {\n      return this.http.get<Cat[]>(this.url, {params: {'age-min': filter.age.min, 'age-max': filter.age.max}});\n    }\n  }\n  "}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=c.Jb({type:e,selectors:[["app-components-architecture"]],decls:130,vars:7,consts:[[3,"lastUpdate"],["appAnchor","",1,"mat-h2"],["appImgTooltip","https://wandervogeldiary.files.wordpress.com/2011/07/i-see-dead-people.jpg"],[3,"code"],["path","app/features/architecture/components/cd-default/cd-default.component.ts"],["path","app/features/architecture/components/cd-default/cd-default.component.html"],["matInput","","type","number",3,"formControl"],["fxLayout",""],[3,"number"],["mat-raised-button","",3,"click"],[4,"ngIf"],["href","https://medium.com/better-programming/zone-js-for-angular-devs-573d89bbb890"],["path","app/shared/components/anchor-nav/anchor-nav.component.ts",3,"showPreview"],[1,"mat-h3"],["href","https://angular.io/api/core/ChangeDetectorRef"],["href","https://angular.io/api/common/AsyncPipe"],["fxLayout","row wrap","fxLayoutAlign","space-around"],["url","assets/src/app/features/architecture/components/on-push-cd-ref/on-push-cd-ref.component.ts"],["url","assets/src/app/features/architecture/components/on-push-cd-ref/on-push-cd-ref.component.html"],["url","assets/src/app/features/architecture/components/on-push-async-pipe/on-push-async-pipe.component.ts"],["url","assets/src/app/features/architecture/components/on-push-async-pipe/on-push-async-pipe.component.html"],["appImgTooltip","https://www.flickfilosopher.com/wptest/wp-content/uploads/2008/10/tennanthamletyorick.gif",1,"mat-h3"]],template:function(e,t){1&e&&(c.Vb(0,"app-article"),c.Vb(1,"app-article-title",0),c.Bc(2,"Components"),c.Ub(),c.Vb(3,"h2",1),c.Bc(4,"General information"),c.Ub(),c.Vb(5,"section"),c.Vb(6,"p"),c.Bc(7," Here are a few global rules to follow when creating a component: "),c.Ub(),c.Vb(8,"ul"),c.Vb(9,"li"),c.Bc(10," Methods that are not used in the template and that are not life-cycle methods should be private, so that it's easier to see "),c.Vb(11,"span",2),c.Bc(12,"actual dead code"),c.Ub(),c.Bc(13,". "),c.Ub(),c.Vb(14,"li"),c.Bc(15," Injected services should be private, and by extension, not used directly in the template. So usage of services should be proxied by the component's attributes and/or methods. "),c.Ub(),c.Vb(16,"li"),c.Bc(17,"At its base, a component is a class, so it shouldn't be 5000+ lines longs. (300 is already too long in most cases)"),c.Ub(),c.Vb(18,"li"),c.Bc(19,' Same thing for the html template, is it too long? You might want to create "sub components" to split a bit your presentation logic (and maybe make them OnPush? \ud83d\ude01) '),c.Ub(),c.Ub(),c.Ub(),c.Vb(20,"h2",1),c.Bc(21,"Dumb/smart spectrum"),c.Ub(),c.Vb(22,"section"),c.Vb(23,"p"),c.Bc(24,' Since you are developing a web application, the environment you are in is stateful, and the components you create are, in some way or another, conscious of that state. In that regard, the dumbest possible component is one for which its local state is only dependent on its inputs (and outputs of its children). On the other side of the spectrum, the "smartest" component can be totally aware of the global state and so it\'s internal state is mostly driven by calls to services. '),c.Ub(),c.Vb(25,"p"),c.Bc(26,' So, is there a best solution? The short answer is "no", the long answer is "no, but let me explain...". Intuitively, a dumb component is considered better since it could be associated to pure functions and those are great right ? It\'s more predictable, easier to maintain and easier to test. But we are in an application with a state, we cannot have only dumb components. And so your next question would be, how smart a smart component should be ? It\'s hard to pinpoint but here are a few rules of thumb: '),c.Ub(),c.Vb(27,"ul"),c.Vb(28,"li"),c.Bc(29," Globally speaking, a smart component should, in its essence, be a bridge between dumb components and the service layer, but still has a low/medium complexity. "),c.Ub(),c.Vb(30,"li"),c.Bc(31," In this regard, it should not know about url to contact and have complex query building logic, this should be given to the service layer. So, if you are going to search for cats trough an api, you should have a "),c.Vb(32,"app-inline-code"),c.Bc(33,"CatService"),c.Ub(),c.Bc(34," that knows about the corresponding endpoint and how to interact with it. "),c.Qb(35,"app-code-block",3),c.Ub(),c.Ub(),c.Ub(),c.Vb(36,"h2",1),c.Bc(37,"Change detection"),c.Ub(),c.Vb(38,"section"),c.Vb(39,"p"),c.Bc(40," By default, angular use some eager change detection strategy, so the template of a component is evaluated multiple times whenever the user interacts with the page. Here below are twice the (almost) same component ("),c.Vb(41,"app-code-link",4),c.Bc(42,"ts"),c.Ub(),c.Bc(43," and "),c.Vb(44,"app-code-link",5),c.Bc(45,"html"),c.Ub(),c.Bc(46,"), the only difference being that C1 has the default change detection and C2 has the OnPush change detection. There is also a third (C3) component that you can toggle which has an OnPush detection strategy and used rxjs' interval inside. "),c.Ub(),c.Vb(47,"mat-card"),c.Vb(48,"mat-form-field"),c.Vb(49,"mat-label"),c.Bc(50,'"number" input for C1 and C2'),c.Ub(),c.Qb(51,"input",6),c.Ub(),c.Vb(52,"div",7),c.Qb(53,"app-cd-default",8),c.Qb(54,"app-cd-on-push",8),c.Vb(55,"div"),c.Vb(56,"button",9),c.dc("click",function(){return t.showIntervalComponent=!t.showIntervalComponent}),c.Bc(57,"Toggle Component with interval inside"),c.Ub(),c.zc(58,S,1,0,"app-on-push-async-pipe",10),c.Ub(),c.Ub(),c.Ub(),c.Vb(59,"p"),c.Bc(60," After playing a bit with the different interactive elements above, you might have seen interesting stuff: "),c.Ub(),c.Vb(61,"ul"),c.Vb(62,"li"),c.Bc(63," C1 has its rendering count increasing whenever there is some interaction with the page: a button being click, a tooltip being rendered, the input value being changed, etc. "),c.Ub(),c.Vb(64,"li"),c.Bc(65,"C2's rendering count only increases when you click on its button or when you change the input value."),c.Ub(),c.Vb(66,"li"),c.Bc(67," When C3 is rendered, we see that C1 is evaluated every time the interval is fired inside C3. This is because of how angular interacts with "),c.Vb(68,"a",11),c.Bc(69,"Zone.js"),c.Ub(),c.Bc(70,". You can see an example of how to opt out of Zone.js for performance reason "),c.Vb(71,"app-code-link",12),c.Bc(72,"here"),c.Ub(),c.Bc(73,". "),c.Ub(),c.Ub(),c.Vb(74,"p"),c.Bc(75," All in all, we see that the "),c.Vb(76,"app-inline-code"),c.Bc(77,"getDouble"),c.Ub(),c.Bc(78," method is called a lot of times. This number of evaluations is not a problem per se and most of the time it is not an issue because angular kinda knows when to stop evaluating templates. Regardless, you need to keep in mind that, in regular components, you need to keep the complexity of your methods and getters used in your template as low as possible. "),c.Ub(),c.Ub(),c.Vb(79,"h3",13),c.Bc(80,"OnPush"),c.Ub(),c.Vb(81,"section"),c.Vb(82,"p"),c.Bc(83," So OnPush is really great but it comes with a few shortcomings. Components that follow this strategy have their templates only evaluated when their inputs change or when the user interacts within the scope of these components, which means: "),c.Ub(),c.Vb(84,"ul"),c.Vb(85,"li"),c.Bc(86," This change detection on the inputs is not smart in anyway, so if one of the inputs is an object, changing one of its property will not trigger change detection. That is one of the reasons why immutability is a big part of angular development and reactive programming in general. "),c.Ub(),c.Vb(87,"li"),c.Bc(88,"You have to do some nitpicking if you deal with async and/or observables."),c.Ub(),c.Ub(),c.Ub(),c.Vb(89,"div",13),c.Bc(90,"OnPush & async"),c.Ub(),c.Vb(91,"section"),c.Vb(92,"p"),c.Bc(93," You have 2 main ways of handling async scenarios, either using "),c.Vb(94,"a",14),c.Bc(95,"ChangeDetectionRef"),c.Ub(),c.Bc(96," or the "),c.Vb(97,"a",15),c.Bc(98,"AsyncPipe"),c.Ub(),c.Bc(99," (or a combination of both). The first solution might give you a code that looks like this: "),c.Ub(),c.Vb(100,"div",16),c.Qb(101,"app-code-block",17),c.Qb(102,"app-code-block",18),c.Ub(),c.Vb(103,"p"),c.Bc(104," Ok, this is a working solution, optimized and the html is clean buuuuuuut... the typescript part is a bit complex and that is with only one subscription. Fortunately, we have the "),c.Vb(105,"app-inline-code"),c.Bc(106,"AsyncPipe"),c.Ub(),c.Bc(107," to the rescue! "),c.Ub(),c.Vb(108,"div",16),c.Qb(109,"app-code-block",19),c.Qb(110,"app-code-block",20),c.Ub(),c.Vb(111,"p"),c.Bc(112," Hey, that is one fancy component, the html is clean and the typescript is elegantly simple (and it is the code of the C3 component used above). There is even no need to handle the subscription's life-cycle, because the "),c.Vb(113,"app-inline-code"),c.Bc(114,"AsyncPipe"),c.Ub(),c.Bc(115," is that great and it should be your go-to solution for this kind of problem, even with the default detection strategy! "),c.Ub(),c.Vb(116,"div",21),c.Bc(117," OnPush or not OnPush ? "),c.Ub(),c.Vb(118,"p"),c.Bc(119," You might have seen this coming, but there is no clear answer for this, it depends on the situation (doesn't it always ?). But hey, I like lists so here are some thoughts: "),c.Ub(),c.Vb(120,"ul"),c.Vb(121,"li"),c.Bc(122," If your component is really dumb, and that its inputs follows the immutability principle, you should make it OnPush, it should be effortless f it is as dumb as yu think. "),c.Ub(),c.Vb(123,"li"),c.Bc(124," If your component is further on the spectrum and that you don't see any performance issue, there usually is no need for the OnPush strategy and the possible complexity that this might add to your code "),c.Ub(),c.Vb(125,"li"),c.Bc(126,"Most of the components in your "),c.Vb(127,"app-inline-code"),c.Bc(128,"SharedModule"),c.Ub(),c.Bc(129," should be OnPush."),c.Ub(),c.Ub(),c.Ub(),c.Ub()),2&e&&(c.Fb(1),c.lc("lastUpdate",t.lastUpdate),c.Fb(34),c.lc("code",t.catExample),c.Fb(16),c.lc("formControl",t.numberControl),c.Fb(2),c.lc("number",t.numberControl.value),c.Fb(1),c.lc("number",t.numberControl.value),c.Fb(4),c.lc("ngIf",t.showIntervalComponent),c.Fb(13),c.lc("showPreview",!1))},directives:[b.a,u.a,d.a,h.a,m.a,g.a,f.a,y.a,B.c,B.g,U.a,p.p,p.c,p.m,p.f,w.b,v,k,V.b,n.l,w.a,T],styles:[""]}),e})(),A=(()=>{class e{constructor(){this.lastUpdate=new Date("2019-11-09"),this.env1="\n  // @env/environment.ts\n  export const environment = {\n    production: false,\n    api: 'http://localhost:8080/api'\n  };\n\n  // @env/environment.prod.ts\n  export const environment = {\n    production: true,\n    api: './api'\n  };\n  ",this.env2="\n  // @env/environment.ts\n  export const environment = {\n    production: false,\n    api: './api'\n  };\n\n  // @env/environment.prod.ts\n  export const environment = {\n    production: true,\n    api: './api'\n  };\n  ",this.proxyConf="\n  // proxy.conf.js\n  module.exports = [\n    {\n      context: [''],\n      target: 'http://localhost:8080',\n      // the bypass part might be useless for you depending on how your backend works\n      bypass: function(req, res, proxyOptions) {\n        if (req.headers.accept && req.headers.accept.indexOf('html') !== -1) {\n          console.log('Skipping proxy for browser request.');\n          return '/index.html';\n        }\n      }\n    }\n  ];\n  ",this.packageJson='\n  // package.json\n  //...\n  "scripts": {\n    "start": "ng serve --proxy-config proxy.conf.js",\n    //...\n  },\n  // ...\n  ',this.routingModuleCode="\n  import { environment } from '@env/environment';\n\n  const routes: Routes = [\n    {\n      path: 'ng-yasgui',\n      loadChildren: () => import('./features/ng-yasgui-doc/ng-yasgui-doc.module')\n        .then(m => m.NgYasguiDocModule)\n    },\n    environment.features.ngCore\n      ? {\n          path: 'ng-core',\n          loadChildren: () => import('./features/ng-core-doc/ng-core-doc.module')\n            .then(m => m.NgCoreDocModule)\n        }\n      : {\n          path: 'ng-core',\n          redirectTo: '/page-not-found'\n        },\n    environment.features.architecture === 'something'\n      ? {\n          path: 'architecture',\n          loadChildren: () => import('./features/architecture/architecture.module')\n            .then(m => m.ArchitectureModule)\n        }\n      : {\n          path: 'architecture',\n          loadChildren: () => import('./features/another-architecture/architecture.module')\n            .then(m => m.ArchitectureModule)\n        },\n    {\n      path: '**',\n      component: PageNotFoundComponent\n    }\n  ];\n\n  @NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule]\n  })\n  export class AppRoutingModule {}\n  "}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=c.Jb({type:e,selectors:[["app-env-apis-and-flags"]],decls:34,vars:5,consts:[[3,"lastUpdate"],["appAnchor","",1,"mat-h2"],[3,"code"],["fxLayout","row wrap","fxLayoutAlign","space-around"],["language","javascript",3,"code"],["language","json",3,"code"],["url","assets/src/app/app-routing.module.ts"]],template:function(e,t){1&e&&(c.Vb(0,"app-article"),c.Vb(1,"app-article-title",0),c.Bc(2,"Env, apis and flags"),c.Ub(),c.Vb(3,"h2",1),c.Bc(4,"Environment"),c.Ub(),c.Vb(5,"section"),c.Vb(6,"p"),c.Bc(7," Developing an Angular application is a lot like survival: there are millions of way to do it, but it's always better to make use of your environment. The most typical use-case is to define you base api like so: "),c.Ub(),c.Qb(8,"app-code-block",2),c.Vb(9,"p"),c.Bc(10,"This is quite practical but we can do even better with some proxy !"),c.Ub(),c.Ub(),c.Vb(11,"h2",1),c.Bc(12,"Proxy"),c.Ub(),c.Vb(13,"section"),c.Vb(14,"p"),c.Bc(15," A really nice thing to use is webpack's proxy that is integrated inside angular/cli. It can be as simple as below and like that, we have a cleaner environment to leave for future generations. "),c.Ub(),c.Vb(16,"div",3),c.Qb(17,"app-code-block",4),c.Qb(18,"app-code-block",2),c.Qb(19,"app-code-block",5),c.Ub(),c.Ub(),c.Vb(20,"h2",1),c.Bc(21,"Env flags and routing"),c.Ub(),c.Vb(22,"section"),c.Vb(23,"p"),c.Bc(24," You can adapt your application's content by using your environment directly in "),c.Vb(25,"app-inline-code"),c.Bc(26,"app-routing.module.ts"),c.Ub(),c.Bc(27,", like here: "),c.Ub(),c.Qb(28,"app-code-block",6),c.Ub(),c.Vb(29,"h2",1),c.Bc(30,"Feature flags"),c.Ub(),c.Vb(31,"section"),c.Vb(32,"p"),c.Bc(33," Coming soon (?)... "),c.Ub(),c.Ub(),c.Ub()),2&e&&(c.Fb(1),c.lc("lastUpdate",t.lastUpdate),c.Fb(7),c.lc("code",t.env1),c.Fb(9),c.lc("code",t.proxyConf),c.Fb(1),c.lc("code",t.env2),c.Fb(1),c.lc("code",t.packageJson))},directives:[b.a,u.a,d.a,g.a,w.b,w.a,m.a],styles:[""]}),e})(),F=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=c.Jb({type:e,selectors:[["app-general-form-article"]],decls:11,vars:0,consts:[["href","https://angular.io/api/forms/FormsModule"],["href","https://angular.io/api/forms/ReactiveFormsModule"]],template:function(e,t){1&e&&(c.Vb(0,"app-article"),c.Vb(1,"app-article-title"),c.Bc(2,"Forms"),c.Ub(),c.Vb(3,"p"),c.Bc(4," In angular, there are 2 main ways to create forms: the "),c.Vb(5,"a",0),c.Bc(6,"template driven way"),c.Ub(),c.Bc(7," and the "),c.Vb(8,"a",1),c.Bc(9,"reactive form way"),c.Ub(),c.Bc(10,". Both ways have their own merits, but we are going to focus on the reactive forms. "),c.Ub(),c.Ub())},directives:[b.a,u.a],styles:[""]}),e})(),O=(()=>{class e{constructor(){this.lastUpdate=new Date("2020-01-15"),this.lintingCommand="npx -p @cognizone/cli cz-cli add-linting -i",this.tsconfig1='\n  {\n    // ...\n    "compilerOptions": {\n      // ...\n      "paths": {\n        "@app/*": ["src/app/*"],\n        "@env/*": ["src/environments/*"]\n      },\n      "strict": true,\n      // ...\n    },\n    // ...\n  }\n  '}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=c.Jb({type:e,selectors:[["app-getting-started"]],decls:111,vars:5,consts:[[3,"lastUpdate"],["appAnchor","",1,"mat-h2"],["href","https://angular.io/tutorial","target","_blank"],["href","https://www.typescriptlang.org/docs/handbook/compiler-options.html","target","_blank"],["language","json",3,"code"],["appAnchor","",1,"mat-h3"],["language","bash",3,"code"],["href","https://verdaccio.cogni.zone/-/web/detail/@cognizone/cli"],[1,"mat-h4"],["url","assets/src/app/core/services/highlight.service.ts"],["href","https://mariusschulz.com/blog/the-unknown-type-in-typescript"],["src","assets/architecture/git-hooks-intellij.png"],["code","git commit --no-verify -m'fix: an issue''","language","bash"]],template:function(e,t){1&e&&(c.Vb(0,"app-article"),c.Vb(1,"app-article-title",0),c.Bc(2,"Getting started"),c.Ub(),c.Vb(3,"h2",1),c.Bc(4,"Intro"),c.Ub(),c.Vb(5,"section"),c.Vb(6,"p"),c.Bc(7," Creating a new angular application is as simple as "),c.Vb(8,"app-inline-code"),c.Bc(9,"ng new my-application-name --routing --style=scss"),c.Ub(),c.Bc(10,". If you haven't already, it's advised to take a look at the "),c.Vb(11,"a",2),c.Bc(12,"tour of heroes tutorial on the angular website"),c.Ub(),c.Bc(13," which is a nice introduction to the angular environment. After creating the basic structure, there are a few things to do in order to make it architecturally great (again?). "),c.Ub(),c.Ub(),c.Vb(14,"h2",1),c.Bc(15,"Adapting tsconfig"),c.Ub(),c.Vb(16,"section"),c.Vb(17,"p"),c.Bc(18," We want to add some entries in the root "),c.Vb(19,"app-inline-code"),c.Bc(20,"tsconfig.json"),c.Ub(),c.Bc(21," file, particularly look at the paths and strict attributes here below. "),c.Vb(22,"app-inline-code"),c.Bc(23,'"strict": true'),c.Ub(),c.Bc(24," enable all "),c.Vb(25,"a",3),c.Bc(26,"strict flags"),c.Ub(),c.Bc(27," for the typescript compiler. The "),c.Vb(28,"app-inline-code"),c.Bc(29,"paths"),c.Ub(),c.Bc(30," entries' main purpose is to have cleaner imports like "),c.Vb(31,"app-inline-code"),c.Bc(32),c.Ub(),c.Bc(33," and "),c.Vb(34,"app-inline-code"),c.Bc(35),c.Ub(),c.Ub(),c.Qb(36,"app-code-block",4),c.Ub(),c.Vb(37,"h2",1),c.Bc(38,"Linting and formatting"),c.Ub(),c.Vb(39,"h3",5),c.Bc(40,"Setup"),c.Ub(),c.Vb(41,"section"),c.Vb(42,"p"),c.Bc(43,"You just need to run this command line and follow the questions and everything will be setup for you:"),c.Ub(),c.Qb(44,"app-code-block",6),c.Vb(45,"p"),c.Bc(46,"To summarize, here is what the cli has done for your project:"),c.Ub(),c.Vb(47,"ul"),c.Vb(48,"li"),c.Bc(49,"We are following Cognizone conventions by extending tslint and prettier configs coming from both packages"),c.Ub(),c.Vb(50,"li"),c.Bc(51,"With lint-staged set up, every time files are committed, they are passed trough prettier and tslint, which mean"),c.Ub(),c.Vb(52,"ul"),c.Vb(53,"li"),c.Bc(54," They are formatted by prettier, following rules coming from @cognizone/prettier, so no more white space, tabs, comma, ... discussions and issues with merge conflict "),c.Ub(),c.Vb(55,"li"),c.Bc(56," *.ts files go trough tslint and are fixed by it, so, for example, imports are ordered, which again minimize conflicts. But tslint cannot fix everything by itself, so if one or more files fail linting, the commit is aborted. "),c.Ub(),c.Vb(57,"li"),c.Bc(58," If you accepted to format your files, every compatible files have been formatted using prettier. Beware that since all those files will be in your next commit, they might throw errors if they are not tslint compliant. See below for a workaround if you don't have the time or the courage to fix them all. "),c.Ub(),c.Ub(),c.Ub(),c.Vb(59,"p"),c.Bc(60," For more information about this cli, please check "),c.Vb(61,"a",7),c.Bc(62,"its homepage"),c.Ub(),c.Bc(63,". "),c.Ub(),c.Ub(),c.Vb(64,"h3",5),c.Bc(65,"Tslint workarounds"),c.Ub(),c.Vb(66,"section"),c.Vb(67,"p"),c.Bc(68," Sometime, tslint is driving you crazy and so you might want to disable it in some places or be able to commit without it bugging you. If so, here are a few tip & tricks. "),c.Ub(),c.Vb(69,"h4",8),c.Bc(70,"Tslint rules are not applicable for this line/file"),c.Ub(),c.Vb(71,"p"),c.Bc(72,"You can disable tslint rules like in the code below:"),c.Ub(),c.Qb(73,"app-code-block",9),c.Vb(74,"ul"),c.Vb(75,"li"),c.Bc(76," On line 2, we see that "),c.Vb(77,"app-inline-code"),c.Bc(78,"no-import-side-effect"),c.Ub(),c.Bc(79," and "),c.Vb(80,"app-inline-code"),c.Bc(81,"ordered-imports"),c.Ub(),c.Bc(82," are disabled for all the lines below line 2 in this file. "),c.Ub(),c.Vb(83,"li"),c.Bc(84," On the line just above "),c.Vb(85,"app-inline-code"),c.Bc(86,"declare var Prism: any;"),c.Ub(),c.Bc(87,", we see that, for this particular line, the "),c.Vb(88,"app-inline-code"),c.Bc(89,"no-any"),c.Ub(),c.Bc(90," rule is disabled. "),c.Ub(),c.Ub(),c.Vb(91,"p"),c.Bc(92," Before doing such adaptation, please take a moment to verify if you really need to disable the rules, but is is acceptable to have "),c.Vb(93,"app-inline-code"),c.Bc(94,"any"),c.Ub(),c.Bc(95," types in a really generic par of the code for example (but you might want to use "),c.Vb(96,"a",10),c.Vb(97,"app-inline-code"),c.Bc(98,"unknown"),c.Ub(),c.Ub(),c.Bc(99," instead?). "),c.Ub(),c.Vb(100,"h4",8),c.Bc(101,"Tslint rules are applicable, but I don't have the time to adapt everything right now."),c.Ub(),c.Vb(102,"p"),c.Bc(103," Tslint rules are checked upon commit, using the git hooks, but you can disable it if need be. If you use the GUI from Intellij to commit, you can disable the git hooks by disabling the checkbox as shown below: "),c.Ub(),c.Qb(104,"img",11),c.Vb(105,"p"),c.Bc(106," If you use git trough command line, when you commit, you can just add the "),c.Vb(107,"app-inline-code"),c.Bc(108,"--no-verify"),c.Ub(),c.Bc(109," flag to your command, like this: "),c.Ub(),c.Qb(110,"app-code-block",12),c.Ub(),c.Ub()),2&e&&(c.Fb(1),c.lc("lastUpdate",t.lastUpdate),c.Fb(31),c.Dc("import ","{"," MyService } from '@app/core'"),c.Fb(3),c.Dc("import ","{"," environment } from '@env/environment'"),c.Fb(1),c.lc("code",t.tsconfig1),c.Fb(8),c.lc("code",t.lintingCommand))},directives:[b.a,u.a,d.a,m.a,g.a],styles:["img[_ngcontent-%COMP%]{max-width:100%}"]}),e})(),Q=(()=>{class e{constructor(){this.lastUpdate=new Date("2019-12-06"),this.exportImportCode="\n    // my-module/index.ts\n    export * from './services/my-service';\n\n    // another-module/components/a-component.ts\n    import { MyService } from '@app/my-module';\n  ",this.coreModuleCode="\n  @NgModule({\n    declarations: [],\n    imports: [\n      CommonModule,\n      GenericCasematesUiCoreModule.forRoot(),\n      HttpClientModule,\n      HttpClientXsrfModule.withOptions({ cookieName: 'XSRF-TOKEN' })\n    ],\n    providers: [\n      { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n      { provide: HTTP_INTERCEPTORS, useClass: AuthErrorInterceptor, multi: true },\n      { provide: HTTP_INTERCEPTORS, useClass: RestInterceptor, multi: true },\n      CookieService,\n      TranslateService\n    ]\n  })\n  export class CoreModule {}\n  ",this.sharedModuleCode="\n  const material = [\n    MatToolbarModule,\n    MatSidenavModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDividerModule,\n    MatTabsModule,\n    MatCardModule,\n    MatTableModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatSlideToggleModule,\n    MatProgressSpinnerModule\n  ];\n  \n  const components = [ApiTableComponent, InlineCodeComponent, \n    CodeBlockComponent, AnchorNavComponent];\n  const pipes = [EscapeHtmlPipe];\n  const directives = [MatTabRoutedDirective, AnchorDirective];\n  \n  @NgModule({\n    declarations: [components, pipes, directives],\n    imports: [CommonModule, material, ReactiveFormsModule],\n    exports: [material, components, pipes, directives, ReactiveFormsModule]\n  })\n  export class SharedModule {\n    static forRoot(): ModuleWithProviders {\n      return {\n        ngModule: SharedModuleRoot,\n        providers: [{ \n          provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, \n          useValue: { appearance: 'outline' } \n        }]\n      };\n    }\n  }\n  \n  @NgModule({\n    declarations: [],\n    imports: [BrowserAnimationsModule, SharedModule],\n    exports: [BrowserAnimationsModule, SharedModule]\n  })\n  export class SharedModuleRoot {}\n  ",this.featureModuleCode="\n  @NgModule({\n    declarations: [GettingStartedComponent, GlobalArchitectureComponent],\n    imports: [CommonModule, ArchitectureRoutingModule, SharedModule]\n  })\n  export class ArchitectureModule {}\n  "}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=c.Jb({type:e,selectors:[["app-global-architecture"]],decls:212,vars:5,consts:[[3,"lastUpdate"],["appAnchor","",1,"mat-h2"],["src","assets/architecture/basic-module.png"],["src","assets/architecture/module-drawer.jpg",2,"height","200px"],["src","assets/architecture/module-full.png"],["href","https://angular.io/api/router/CanActivate","target","_blank"],["href","https://angular.io/api/router/CanDeactivate","target","_blank"],["href","https://angular.io/api/common/http/HttpInterceptor"],["href","https://jsonapi.org/format/#document-top-level"],["href","https://www.ngxs.io/"],["href","https://ngrx.io/"],[3,"code"],["src","assets/architecture/modules-all.png"],[1,"mat-h3"],["fxLayout","row wrap","fxLayoutAlign","space-around space-around"],["src","assets/architecture/modules-core-file-tree.png"],["src","assets/architecture/modules-shared.png"],["href","https://angular.io/api/core/ChangeDetectionStrategy"],["href","https://angular.io/api/core/ChangeDetectorRef"],["src","assets/architecture/modules-feature.png"],["href","https://angular.io/guide/build#configuring-size-budgets","target","_blank"],["src","assets/architecture/modules-dependencies.png"]],template:function(e,t){1&e&&(c.Vb(0,"app-article"),c.Vb(1,"app-article-title",0),c.Bc(2,"Modules"),c.Ub(),c.Vb(3,"h2",1),c.Bc(4,"Modules and how to structure them"),c.Ub(),c.Vb(5,"section"),c.Vb(6,"p"),c.Bc(7,"In its most basic form, a module could look like this"),c.Ub(),c.Qb(8,"img",2),c.Vb(9,"p"),c.Bc(10," Of course a module is never (?) that simple, and you will certainly have multiple components/services and others. To have a clean module is almost like having a clean drawer cabinet, each drawer storing a certain type of cloth. "),c.Ub(),c.Qb(11,"img",3),c.Vb(12,"p"),c.Bc(13,"With that comparison in mind, a really complete module could look like this:"),c.Ub(),c.Qb(14,"img",4),c.Vb(15,"p"),c.Bc(16," In practice, a module is rarely so complete and we want to scope its responsibility to limit its size and complexity. So, what are those different folders for ? Most of them are pretty self explanatory but hey, let's dive in: "),c.Ub(),c.Vb(17,"ul"),c.Vb(18,"li"),c.Vb(19,"app-inline-code"),c.Bc(20,"components"),c.Ub(),c.Bc(21,": contains the components of the modules, each sub-folder being a different component. Those components should be as dumb as possible, so their knowledge of the global state should be limited and their behavior should mainly be driven by inputs. "),c.Ub(),c.Vb(22,"li"),c.Vb(23,"app-inline-code"),c.Bc(24,"directives"),c.Ub(),c.Bc(25,": contains the different directives of the module"),c.Ub(),c.Vb(26,"li"),c.Vb(27,"app-inline-code"),c.Bc(28,"guards"),c.Ub(),c.Bc(29,": contains the guards of this module. Guards are services used in routing and that implements "),c.Vb(30,"a",5),c.Vb(31,"app-inline-code"),c.Bc(32,"CanActivate"),c.Ub(),c.Ub(),c.Bc(33,", "),c.Vb(34,"a",6),c.Vb(35,"app-inline-code"),c.Bc(36,"CanDeactivate"),c.Ub(),c.Ub(),c.Bc(37," or others. A typical case of such a service would be to implement "),c.Vb(38,"app-inline-code"),c.Bc(39,"CanActivate"),c.Ub(),c.Bc(40," and to verify if the user is logged in before going to a particular part of the application. "),c.Ub(),c.Vb(41,"li"),c.Vb(42,"app-inline-code"),c.Bc(43,"http-interceptors"),c.Ub(),c.Bc(44,": contains the different "),c.Vb(45,"a",7),c.Vb(46,"app-inline-code"),c.Bc(47,"HttpInterceptor"),c.Ub(),c.Ub(),c.Bc(48," services of the module. A typical use case would be to intercept response to handle errors following the "),c.Vb(49,"a",8),c.Bc(50,"Json:api"),c.Ub(),c.Bc(51," or to add some authentication headers to all requests. "),c.Ub(),c.Vb(52,"li"),c.Vb(53,"app-inline-code"),c.Bc(54,"models"),c.Ub(),c.Bc(55,": here you put all the models of your module, either being classes, interfaces, types or enums. If you don't need to use "),c.Vb(56,"app-inline-code"),c.Bc(57,"instanceof"),c.Ub(),c.Bc(58," on your model, it's simpler to stay away from classes and use types or interfaces instead. "),c.Ub(),c.Vb(59,"li"),c.Vb(60,"app-inline-code"),c.Bc(61,"pipes"),c.Ub(),c.Bc(62,": you put the pipes here, pure and simple."),c.Ub(),c.Vb(63,"li"),c.Vb(64,"app-inline-code"),c.Bc(65,"services"),c.Ub(),c.Bc(66,": well... you put services here that don't belong in other folders."),c.Ub(),c.Vb(67,"li"),c.Vb(68,"app-inline-code"),c.Bc(69,"store"),c.Ub(),c.Bc(70,": you store here everything that is related to state management for your module, either using some well known libraries (like "),c.Vb(71,"a",9),c.Bc(72,"ngxs \ud83d\udc93"),c.Ub(),c.Bc(73," or "),c.Vb(74,"a",10),c.Bc(75,"ngrx"),c.Ub(),c.Bc(76,") or defining your own. Beware that, normally, the store part of a module knows about the service part, but not the other way around ! "),c.Ub(),c.Vb(77,"li"),c.Vb(78,"app-inline-code"),c.Bc(79,"views"),c.Ub(),c.Bc(80,": here is for the components that are smart (think hard to reuse). Typically, you'll put here components that are directly used by the routing module and/or knows about the state that is in the "),c.Vb(81,"app-inline-code"),c.Bc(82,"store"),c.Ub(),c.Bc(83," . "),c.Ub(),c.Ub(),c.Vb(84,"p"),c.Bc(85," You might have noticed that there is also the "),c.Vb(86,"app-inline-code"),c.Bc(87,"index.ts"),c.Ub(),c.Bc(88," file. There you should export everything that you want to be accessible outside the scope of your module so that you have cleaner imports. For example: "),c.Ub(),c.Qb(89,"app-code-block",11),c.Ub(),c.Vb(90,"h2",1),c.Bc(91,"Modules and where to find them"),c.Ub(),c.Vb(92,"section"),c.Vb(93,"p"),c.Bc(94," Now that we have seen the structure of an abstract module, let's define some typical modules you will have and scope their responsibilities. "),c.Ub(),c.Qb(95,"img",12),c.Vb(96,"h3",13),c.Bc(97,"Core module"),c.Ub(),c.Vb(98,"p"),c.Bc(99," This module should only be imported once, in your "),c.Vb(100,"app-inline-code"),c.Bc(101,"app.module.ts"),c.Ub(),c.Bc(102,". Here you will find services associated to your business logic, like the "),c.Vb(103,"app-inline-code"),c.Bc(104,"AuthService"),c.Ub(),c.Bc(105," that handles authentication, an "),c.Vb(106,"app-inline-code"),c.Bc(107,"AuthGuard"),c.Ub(),c.Bc(108,", and others. Usually, you will not find any components/directives/pipes (or maybe some directly used in "),c.Vb(109,"app-inline-code"),c.Bc(110,"app.component.html"),c.Ub(),c.Bc(111," ). So a typical core module folder would look like: "),c.Ub(),c.Vb(112,"div",14),c.Qb(113,"img",15),c.Qb(114,"app-code-block",11),c.Ub(),c.Vb(115,"p"),c.Bc(116," Of course, you can import entities from "),c.Vb(117,"app-inline-code"),c.Bc(118,"core"),c.Ub(),c.Bc(119," anywhere else in the the application, it's just the module itself that has to be imported only once. "),c.Ub(),c.Vb(120,"h3",13),c.Bc(121,"Shared module"),c.Ub(),c.Vb(122,"p"),c.Bc(123," Here you will put most of the reusable (dumb) components/directives/pipes used in your application. You will also want to export commonly used module to limit the amount of imports you have to do for each new feature module. "),c.Ub(),c.Vb(124,"div",14),c.Qb(125,"img",16),c.Qb(126,"app-code-block",11),c.Ub(),c.Vb(127,"p"),c.Bc(128," Since most components here are dumb (input driven), most of them should be using the "),c.Vb(129,"a",17),c.Bc(130,"OnPush change detection strategy"),c.Ub(),c.Bc(131,", maybe with the help of the "),c.Vb(132,"a",18),c.Bc(133,"ChangeDetectorRef"),c.Ub(),c.Bc(134," if need be. "),c.Ub(),c.Vb(135,"h3",13),c.Bc(136,"Feature modules"),c.Ub(),c.Vb(137,"p"),c.Bc(138," Feature modules are where you put your... features, yeah I know. The simplest way to kickstart a new feature is to generate it using the cli, with something like "),c.Vb(139,"app-inline-code"),c.Bc(140,"ng g module features/feature-a --routing --route=feature-a-route -m=app-routing.module"),c.Ub(),c.Bc(141,". Isn't it great ? You just generated a new feature module with lazy-loading and all it took was one command. "),c.Ub(),c.Vb(142,"div",14),c.Qb(143,"img",19),c.Qb(144,"app-code-block",11),c.Ub(),c.Vb(145,"p"),c.Bc(146," What ? No "),c.Vb(147,"app-inline-code"),c.Bc(148,"index.ts"),c.Ub(),c.Bc(149," file ?! Yeah, you shouldn't need it here because, except for the routing part, no other place of the application should depend on a feature module (see below for more details about module inter-dependencies). "),c.Ub(),c.Vb(150,"h3",13),c.Bc(151,"Shared feature modules"),c.Ub(),c.Vb(152,"p"),c.Bc(153," Those modules serve the same kind of purpose as the "),c.Vb(154,"app-inline-code"),c.Bc(155,"SharedModule"),c.Ub(),c.Bc(156," but with a more dedicated scope. For example, you could create a "),c.Vb(157,"app-inline-code"),c.Bc(158,"FormModule"),c.Ub(),c.Bc(159," as a shared feature because you don't need every feature to have access to all form related components. Please consider creating a shared feature module only if a clear need arises, usually everything should be ok by just putting your common entities in either "),c.Vb(160,"app-inline-code"),c.Bc(161,"CoreModule"),c.Ub(),c.Bc(162," or "),c.Vb(163,"app-inline-code"),c.Bc(164,"SharedModule"),c.Ub(),c.Bc(165," depending on their type. You may start considering using shared feature modules if you excess your "),c.Vb(166,"a",20),c.Bc(167,"budgets"),c.Ub(),c.Bc(168," on certain part of your app. "),c.Ub(),c.Ub(),c.Vb(169,"h2",1),c.Bc(170,"Modules inter-dependencies"),c.Ub(),c.Vb(171,"section"),c.Vb(172,"p"),c.Bc(173," As with most code bases, we want our dependencies to look more like a directed graph and we don't want any circular dependencies! Since a picture is worth a thousand words, here goes: "),c.Ub(),c.Qb(174,"img",21),c.Vb(175,"p"),c.Bc(176,"To summarize"),c.Ub(),c.Vb(177,"ul"),c.Vb(178,"li"),c.Vb(179,"app-inline-code"),c.Bc(180,"CoreModule"),c.Ub(),c.Bc(181," entities do not have imports coming from the rest of the code base."),c.Ub(),c.Vb(182,"li"),c.Vb(183,"app-inline-code"),c.Bc(184,"SharedModule"),c.Ub(),c.Bc(185," entities do not have imports coming from the rest of the code base either, exception being maybe to import services or models from "),c.Vb(186,"app-inline-code"),c.Bc(187,"CoreModule"),c.Ub(),c.Bc(188,". Ideally, you should be able to copy/paste your "),c.Vb(189,"app-inline-code"),c.Bc(190,"SharedModule"),c.Ub(),c.Bc(191," folder in another application with as little effort as possible (or make it a library). "),c.Ub(),c.Vb(192,"li"),c.Bc(193," Feature modules entities can import entities from "),c.Vb(194,"app-inline-code"),c.Bc(195,"CoreModule"),c.Ub(),c.Bc(196," and "),c.Vb(197,"app-inline-code"),c.Bc(198,"SharedModule"),c.Ub(),c.Bc(199,", but have no knowledge of entities coming from other feature modules. There are 2 main exceptions to this: "),c.Vb(200,"ul"),c.Vb(201,"li"),c.Bc(202,"A feature can have an indirect knowledge of another feature by knowing how to route to that feature."),c.Ub(),c.Vb(203,"li"),c.Bc(204,' A feature can have a more direct knowledge of other features by being a "feature container", so it is a feature whose main responsibility is to wire up other features in the same way as the '),c.Vb(205,"app-inline-code"),c.Bc(206,"app-routing.module.ts"),c.Ub(),c.Bc(207," does. "),c.Ub(),c.Ub(),c.Ub(),c.Vb(208,"li"),c.Vb(209,"app-inline-code"),c.Bc(210,"AppModule"),c.Ub(),c.Bc(211,", being the container of it all, can import anything from anywhere."),c.Ub(),c.Ub(),c.Ub(),c.Ub()),2&e&&(c.Fb(1),c.lc("lastUpdate",t.lastUpdate),c.Fb(88),c.lc("code",t.exportImportCode),c.Fb(25),c.lc("code",t.coreModuleCode),c.Fb(12),c.lc("code",t.sharedModuleCode),c.Fb(18),c.lc("code",t.featureModuleCode))},directives:[b.a,u.a,d.a,m.a,g.a,w.b,w.a],styles:["img[_ngcontent-%COMP%]{display:block;margin-left:auto;margin-right:auto;max-width:100%;align-self:center}"]}),e})();var P=o("58yR"),D=o("NObz");const R=function(){return{"max-height":"800px","max-width":"400px"}},z=function(){return{url:"assets/src/styles/vendors/_material.scss"}},E=[{path:"",component:l,children:[{path:"",redirectTo:"getting-started"},{path:"getting-started",component:O},{path:"global-architecture",component:Q},{path:"env-apis-and-flags",component:A},{path:"styling",component:(()=>{class e{constructor(){this.lastUpdate=new Date("2019-11-20"),this.badImportsScss="\n  // shared/components/my-component/my-component.scss\n  @import '../../../../styles/abstracts/variables';\n  @import '../../../../styles/abstracts/mixins';\n  // ...\n  ",this.angularJsonImports='\n  // ...\n  "architect": {\n    "build": {\n      "builder": "@angular-devkit/build-angular:browser",\n      "options": {\n        "outputPath": "dist/docs-app",\n        "index": "projects/docs-app/src/index.html",\n        "main": "projects/docs-app/src/main.ts",\n        "polyfills": "projects/docs-app/src/polyfills.ts",\n        "tsConfig": "projects/docs-app/tsconfig.app.json",\n        "aot": false,\n        "assets": ["projects/docs-app/src/favicon.ico", "projects/docs-app/src/assets"],\n        "stylePreprocessorOptions": { "includePaths": ["projects/docs-app/src/styles"] }, // THIS IS THE KEY PART\n        "styles": ["projects/docs-app/src/styles/main.scss"],\n        "scripts": []\n      },\n      // ...\n    },\n    // ...\n  ',this.angularJsonDarkTheme1='\n  // under "configurations"\n  "production-dark": {\n    "fileReplacements": [\n      {\n        "replace": "projects/docs-app/src/environments/environment.ts",\n        "with": "projects/docs-app/src/environments/environment.prod.ts"\n      }\n    ],\n    "tsConfig": "projects/docs-app/tsconfig.prod.json",\n    "optimization": true,\n    "outputHashing": "all",\n    "sourceMap": false,\n    "extractCss": true,\n    "namedChunks": true,\n    "aot": true,\n    "extractLicenses": true,\n    "vendorChunk": false,\n    "buildOptimizer": true,\n    "budgets": [\n      {\n        "type": "initial",\n        "maximumWarning": "2mb",\n        "maximumError": "5mb"\n      },\n      {\n        "type": "anyComponentStyle",\n        "maximumWarning": "6kb",\n        "maximumError": "10kb"\n      }\n    ],\n    "stylePreprocessorOptions": { "includePaths": ["projects/docs-app/src/styles/themes/dark", "projects/docs-app/src/styles"] },\n    "styles": ["projects/docs-app/src/styles/themes/dark/main.scss"]\n  },\n  "dark": {\n    "stylePreprocessorOptions": { "includePaths": ["projects/docs-app/src/styles/themes/dark", "projects/docs-app/src/styles"] },\n    "styles": ["projects/docs-app/src/styles/themes/dark/main.scss"]\n  }\n  // ...\n  // under "serve"\n  "dark": {\n    "browserTarget": "docs-app:build:dark"\n  }\n  ',this.darkThemeScripts="\n    ng serve --configuration=dark\n    ng build --configuration=production-dark\n  ",this.darkThemeScripts9="\n    ng serve --configuration=dark\n    ng build --configuration=production,dark\n  ",this.bootstrapScss='\n  // src/styles/vendors/_bootstrap.scss\n  // Configuration\n  @import "~bootstrap/scss/functions";\n  @import "~bootstrap/scss/variables";\n  @import "~bootstrap/scss/mixins";\n\n  // Layout & components\n  @import "~bootstrap/scss/root";\n  @import "~bootstrap/scss/reboot";\n  @import "~bootstrap/scss/type";\n  @import "~bootstrap/scss/images";\n  @import "~bootstrap/scss/grid";\n  // parts about table, buttons and others are not imported because we don\'t use them\n\n  // Utilities\n  @import "~bootstrap/scss/utilities";\n  '}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=c.Jb({type:e,selectors:[["app-styling"]],decls:261,vars:12,consts:[[3,"lastUpdate"],["appImgTooltip","https://giphygifs.s3.amazonaws.com/media/t1lmQR7sXeZJC/giphy.gif"],["href","https://sass-lang.com/"],["href","https://sass-lang.com/documentation/syntax"],["appAnchor","",1,"mat-h2"],["href","https://sass-guidelin.es/#the-7-1-pattern","appImgTooltip","https://miro.medium.com/max/628/1*0MP59mq0K_Hi2ECSb_Zwhg.png",3,"imgStyle"],["fxLayout","","fxLayoutAlign","start"],["src","assets/architecture/styles-structure.png"],["from","https://sass-guidelin.es/#base-folder"],["href","https://bitbucket.org/cognizone/ng-cognizone/src/master/projects/docs-app/src/styles/vendors/_material.scss","appComponentTooltip","code",3,"inputs"],["appImgTooltip","https://media.giphy.com/media/VHngktboAlxHW/giphy-downsized-large.gif"],["url","assets/src/styles/main.scss"],["language","scss","appImgTooltip","https://media.giphy.com/media/xUOwG5IshvzNMdzR72/giphy.gif",3,"code"],["href","https://angular.io/guide/workspace-config#style-preprocessor-options"],["language","json",3,"code"],["url","assets/src/app/shared/components/code-block/code-block.component.scss"],["fxLayout","row wrap","fxLayoutAlign","space-around"],["url","assets/src/styles/themes/dark/abstracts/_variables.scss","prefix","// src/styles/themes/dark/abstracts/_variables.scss"],["url","assets/src/styles/themes/dark/main.scss","prefix","// src/styles/themes/dark/main.scss"],[3,"code"],["language","bash",3,"code"],[1,"mat-h3"],["appImgTooltip","https://4.bp.blogspot.com/-RKy5Z397Ca0/Tybm-UdyjBI/AAAAAAAABNI/QppDWOmJiRw/s1600/evilinternetexplorer.jpg"],["href","https://meyerweb.com/eric/tools/css/reset/"],["href","https://www.npmjs.com/package/reset.css"],["href","https://necolas.github.io/normalize.css/"],["href","https://getbootstrap.com/docs/4.3/content/reboot/"],["appImgTooltip","https://media.giphy.com/media/cvyjkCiOw1QRy/giphy.gif"],["appAnchor","",1,"mat-h3"],["href","https://material.io/design/"],["href","https://material.angular.io/guide/elevation"],["href","https://material.angular.io/guide/typography"],["href","https://getbootstrap.com/docs/4.3/getting-started/introduction/"],["href","https://getbootstrap.com/docs/4.3/layout/grid/"],["href","https://getbootstrap.com/docs/4.3/utilities/borders/"],["language","scss",3,"code"],[1,"d-flex","align-items-start",2,"justify-content","space-around"],["src","assets/architecture/styles-bootstrap.png"],[1,"d-flex","flex-wrap","align-items-start",2,"justify-content","space-around"],["prefix","// styles/vendors/bootstrap/_abstract.scss","url","assets/src/styles/vendors/bootstrap/_abstract.scss"],["prefix","// styles/vendors/bootstrap/_base.scss","url","assets/src/styles/vendors/bootstrap/_base.scss"],["prefix","// styles/vendors/bootstrap/_override.scss","url","assets/src/styles/vendors/bootstrap/_override.scss"],["prefix","// styles/vendors/_bootstrap.scss","url","assets/src/styles/vendors/_bootstrap.scss"],["href","https://www.bourbon.io/"],["href","https://www.bourbon.io/docs/latest/#ellipsis"],["href","https://www.bourbon.io/docs/latest/#border-left-radius"],["href","https://tailwindcss.com"],["href","https://www.jerriepelser.com/blog/using-tailwindcss-with-angular/"],["href","https://bulma.io/"]],template:function(e,t){1&e&&(c.Vb(0,"app-article"),c.Vb(1,"app-article-title",0),c.Bc(2,"Styling"),c.Ub(),c.Vb(3,"section"),c.Vb(4,"p"),c.Bc(5," Substance over form right ? But for a UI/UX to be great, you need some "),c.Vb(6,"span",1),c.Bc(7,"pazazz"),c.Ub(),c.Bc(8,", and that comes from styling with css (well, "),c.Vb(9,"a",2),c.Bc(10,"scss"),c.Ub(),c.Bc(11," in our case). If you are not familiar with scss, "),c.Vb(12,"a",3),c.Bc(13,"their documentation"),c.Ub(),c.Bc(14," is not very long and a great place to start. "),c.Ub(),c.Ub(),c.Vb(15,"h2",4),c.Bc(16," Structuring "),c.Ub(),c.Vb(17,"section"),c.Vb(18,"p"),c.Bc(19,' As with the "angular part" of the app, we also want to have structure for our global styling. In a perfect world, your structure would look like this so that it (kinda) follows '),c.Vb(20,"a",5),c.Bc(21," the 7-1 pattern "),c.Ub(),c.Bc(22,", but with a few quirks to make it Angular-y : "),c.Ub(),c.Vb(23,"div",6),c.Qb(24,"img",7),c.Vb(25,"ul"),c.Vb(26,"li"),c.Vb(27,"app-inline-code"),c.Bc(28,"abstracts"),c.Ub(),c.Bc(29,": here are all the scss files that do not produce any css on their own. That means that you could "),c.Vb(30,"app-inline-code"),c.Bc(31,"@import '...';"),c.Ub(),c.Bc(32," all the partials from this folder in another file and it will not generate any css rules unless you declaratively use the mixins, placeholders, etc. that are inside those files. "),c.Ub(),c.Vb(33,"li"),c.Vb(34,"app-inline-code"),c.Bc(35,"base"),c.Ub(),c.Bc(36,": "),c.Vb(37,"app-blockquote",8),c.Bc(38," The base/ folder holds what we might call the boilerplate code for the project. In there, you might find the reset file, some typographic rules, and probably a stylesheet defining some standard styles for commonly used HTML elements (that I like to call _base.scss). "),c.Ub(),c.Vb(39,"span"),c.Bc(40," Note that you might have close to a 0% chance of having to create your own reset file (see below)"),c.Ub(),c.Ub(),c.Vb(41,"li"),c.Vb(42,"app-inline-code"),c.Bc(43,"layout"),c.Ub(),c.Bc(44,": contains layout related styling, so mostly grid related rules."),c.Ub(),c.Vb(45,"li"),c.Vb(46,"app-inline-code"),c.Bc(47,"themes"),c.Ub(),c.Bc(48,': You should just know that all sub-folders are one theme and need to follow the same structure as the "root" styles folder. See below if you have needs for theming (did I just hear someone yell "Swiss" in the back ?) '),c.Ub(),c.Vb(49,"li"),c.Vb(50,"app-inline-code"),c.Bc(51,"vendors"),c.Ub(),c.Bc(52,": here you put scss code that imports styles from node_modules, one file per npm package ideally. you can have a look at "),c.Vb(53,"a",9),c.Bc(54,"_material.scss"),c.Ub(),c.Bc(55," for example. "),c.Ub(),c.Vb(56,"li"),c.Vb(57,"app-inline-code"),c.Bc(58,"main.scss"),c.Ub(),c.Bc(59,": this is where the "),c.Vb(60,"span",10),c.Bc(61,"magic"),c.Ub(),c.Bc(62," happens, its the file that will be imported in your "),c.Vb(63,"app-inline-code"),c.Bc(64,"angular.json"),c.Ub(),c.Bc(65," file an so that will be used to generate the global styling of your app. "),c.Qb(66,"app-code-block",11),c.Ub(),c.Ub(),c.Ub(),c.Ub(),c.Vb(67,"h2",4),c.Bc(68,"Naming"),c.Ub(),c.Vb(69,"ul"),c.Vb(70,"li"),c.Bc(71," Everything should be in "),c.Vb(72,"app-inline-code"),c.Bc(73,"kebab-case"),c.Ub(),c.Bc(74,", except for constants that should be in "),c.Vb(75,"app-inline-code"),c.Bc(76,"SCREAMING-KEBAB-CASE"),c.Ub(),c.Bc(77,". "),c.Ub(),c.Vb(78,"li"),c.Bc(79," If you need modifier classes like the "),c.Vb(80,"app-inline-code"),c.Bc(81,"d-flex"),c.Ub(),c.Bc(82," class from Bootstrap, you should prefix them with "),c.Vb(83,"app-inline-code"),c.Bc(84,"is-"),c.Ub(),c.Bc(85,", so you might have a class called "),c.Vb(86,"app-inline-code"),c.Bc(87,"is-flex"),c.Ub(),c.Bc(88," for example. "),c.Ub(),c.Ub(),c.Vb(89,"h2",4),c.Bc(90,"Components"),c.Ub(),c.Vb(91,"p"),c.Bc(92," One of the purpose of the aforementioned structure is to enable you to easily and cleanly style your components. So, you might want to use your variables and your mixins in your component stylesheet right ? You first reflex might be to do something like this: "),c.Ub(),c.Qb(93,"app-code-block",12),c.Vb(94,"p"),c.Bc(95," This is not really great is it? We can do better ! First, you will have to adapt your "),c.Vb(96,"app-inline-code"),c.Bc(97,"angular.json"),c.Ub(),c.Bc(98," file. In particular, it's the "),c.Vb(99,"a",13),c.Bc(100,"stylePreprocessorOptions"),c.Ub(),c.Bc(101," we want to add. "),c.Ub(),c.Qb(102,"app-code-block",14),c.Vb(103,"p"),c.Bc(104,"With this, your component's stylesheet could be as elegant as"),c.Ub(),c.Qb(105,"app-code-block",15),c.Vb(106,"h2",4),c.Bc(107,"Theming (compile time)"),c.Ub(),c.Vb(108,"p"),c.Bc(109," If you followed the previous sections, you just need a few extra steps for each theme you will have. First you'll have to add a folder for your new theme like shown in the structure section above for a sweet sweet dark theme. Ideally, you will not need much more then the "),c.Vb(110,"app-inline-code"),c.Bc(111,"mains.scss"),c.Ub(),c.Bc(112," and "),c.Vb(113,"app-inline-code"),c.Bc(114,"_variables.scss"),c.Ub(),c.Bc(115,". You can see below a naive implementation of a dark theme. "),c.Ub(),c.Vb(116,"div",16),c.Qb(117,"app-code-block",17),c.Qb(118,"app-code-block",18),c.Ub(),c.Vb(119,"p"),c.Bc(120," This might feel a bit convoluted but this structure gives you theming both for global styling and component styling. The last thing you have to adapt is the infamous "),c.Vb(121,"app-inline-code"),c.Bc(122,"angular.json"),c.Ub(),c.Bc(123," and add two new configurations for you theme next to the production configuration. "),c.Ub(),c.Qb(124,"app-code-block",19),c.Vb(125,"p"),c.Bc(126,' You will notice that the "production-dark" is a merge between the "production" and the "dark" configurations. With all that, your scripts for developing and building the app could be: '),c.Ub(),c.Qb(127,"app-code-block",20),c.Vb(128,"h3",21),c.Bc(129,"Note on angular 9+"),c.Ub(),c.Vb(130,"p"),c.Bc(131,' Coming in angular 9, we will be able to use multiple configurations in one command line, so the "production-dark" could be removed and the scripts would look like '),c.Ub(),c.Qb(132,"app-code-block",20),c.Vb(133,"h2",4),c.Bc(134,"Css reset"),c.Ub(),c.Vb(135,"p"),c.Bc(136," The thing is, all browsers are not born equal and in regard to this topic, default css rules for buttons, list and others might not be consistent depending on which browser you are using (and in particular, which "),c.Vb(137,"span",22),c.Bc(138,"browser your user is using"),c.Ub(),c.Bc(139,"). In this regard, it is always better to do a good cleanup at the start to standardize default styling. "),c.Ub(),c.Vb(140,"p"),c.Bc(141,"There are a few options available depending on the strength of the visual identity your application need to have:"),c.Ub(),c.Vb(142,"ul"),c.Vb(143,"li"),c.Vb(144,"a",23),c.Bc(145,"Reset CSS"),c.Ub(),c.Bc(146,": this ancestral css reset is quite basic and kinda remove everything, so it's a good base if you want to define everything on your own. It is also available as an "),c.Vb(147,"a",24),c.Bc(148,"unofficial npm package"),c.Ub(),c.Bc(149,". "),c.Ub(),c.Vb(150,"li"),c.Vb(151,"a",25),c.Bc(152,"Normalize.css"),c.Ub(),c.Bc(153," is a more lenient reset that keeps a few basics (like lists keeping their bullets). It's a good start to have consistency but also usability for the base html elements. "),c.Ub(),c.Vb(154,"li"),c.Vb(155,"a",26),c.Bc(156,"Reboot"),c.Ub(),c.Bc(157," is the css reset of bootstrap and it you should be your choice, well, if you use bootstrap in your app. It might be a good choice even if it's the only part of bootstrap you will use (and it is based on Normalize.css!). Beware that it comes with a great design idea which is "),c.Vb(158,"app-inline-code"),c.Bc(159),c.Ub(),c.Bc(160," which might be problematic for some situations, like when using "),c.Vb(161,"app-inline-code"),c.Bc(162,"mat-form-field"),c.Ub(),c.Bc(163," from angular material. "),c.Ub(),c.Ub(),c.Vb(164,"h2",4),c.Bc(165,"Css frameworks/libraries"),c.Ub(),c.Vb(166,"p"),c.Bc(167," So, chances are, you don't want to start from scratch for your styles right? There are a "),c.Vb(168,"span",27),c.Bc(169,"lots of solutions available to us today"),c.Ub(),c.Bc(170,". "),c.Ub(),c.Vb(171,"h3",28),c.Bc(172,"Angular material"),c.Ub(),c.Vb(173,"p"),c.Bc(174," Ok ok, this is more of an angular/javascript library than a css one, but hear me out. So, material is a set of extensive "),c.Vb(175,"a",29),c.Bc(176,"styling guidelines"),c.Ub(),c.Bc(177," that aims to provide a highly consistent and qualitative UX. Because of this, material has a really strong visual identity so it might be hard to tweak it to your needs, but if your needs are close enough to the material design specs, this should be your go-to solution. In deed, the angular material library comes with a lot of qualitative components and services that are easy(-ish) to use and requires from you very few (styling) customization. "),c.Ub(),c.Vb(178,"p"),c.Bc(179," And what about css? The thing is, angular material is more about providing styled components then a css framework. You do have a few classes to be used anywhere in your app like the ones for "),c.Vb(180,"a",30),c.Bc(181,"elevation"),c.Ub(),c.Bc(182," or for "),c.Vb(183,"a",31),c.Bc(184,"typography"),c.Ub(),c.Bc(185,", but that is it. So, if you need need more, please look at the rest of this list. "),c.Ub(),c.Vb(186,"h3",28),c.Bc(187,"Bootstrap"),c.Ub(),c.Vb(188,"p"),c.Vb(189,"a",32),c.Bc(190,"Bootstrap"),c.Ub(),c.Bc(191,' is the current ruler of the css frameworks empire and it has been wearing the crown for several years now. It really is a good place to start, and even without the "component" part of the framework, all the different helpers classes are quite useful, like their '),c.Vb(192,"a",33),c.Bc(193,"grid system"),c.Ub(),c.Bc(194," or the different "),c.Vb(195,"a",34),c.Bc(196,"utility classes"),c.Ub(),c.Bc(197,". If you already are using a more component oriented framework like angular material, it might be a good idea that, instead of directly importing "),c.Vb(198,"app-inline-code"),c.Bc(199,"bootstrap.scss"),c.Ub(),c.Bc(200,", you put a dedicated file in your vendors folder and import only the needed scss files from bootstrap. Based on the source-code of "),c.Vb(201,"app-inline-code"),c.Bc(202,"bootstrap.scss"),c.Ub(),c.Bc(203,", you could have something like this: "),c.Ub(),c.Qb(204,"app-code-block",35),c.Vb(205,"p"),c.Bc(206," But we are in angular, so what do we want? Styled components! And when do we want them? Right now! So the previous example is not good enough, we need to split things up a bit: "),c.Ub(),c.Vb(207,"div",36),c.Qb(208,"img",37),c.Vb(209,"div",38),c.Qb(210,"app-code-block",39),c.Qb(211,"app-code-block",40),c.Qb(212,"app-code-block",41),c.Qb(213,"app-code-block",42),c.Ub(),c.Ub(),c.Vb(214,"p"),c.Bc(215,"With this in place, you can use bootstrap at both:"),c.Ub(),c.Vb(216,"ul"),c.Vb(217,"li"),c.Bc(218," the global level: you just need to add "),c.Vb(219,"app-inline-code"),c.Bc(220,"@import 'vendors/bootstrap.scss';"),c.Ub(),c.Bc(221," to your "),c.Vb(222,"app-inline-code"),c.Bc(223,"main.scss"),c.Ub(),c.Bc(224," file "),c.Ub(),c.Vb(225,"li"),c.Bc(226," the component level: depending on what you need, you might just want to add "),c.Vb(227,"app-inline-code"),c.Bc(228,"@import 'vendors/bootstrap/abstract';"),c.Ub(),c.Bc(229," to your file to start using bootstrap stuff in your component, like here below. "),c.Ub(),c.Ub(),c.Qb(230,"app-code-block",15),c.Vb(231,"h3",28),c.Bc(232,"Others"),c.Ub(),c.Vb(233,"p"),c.Bc(234,"Here is a short list of qualitative libraries that you might want to at least read about:"),c.Ub(),c.Vb(235,"ul"),c.Vb(236,"li"),c.Vb(237,"a",43),c.Bc(238,"Bourbon"),c.Ub(),c.Bc(239," is a pure scss library that comes only with abstract entities (mixin, etc.). So this is just like "),c.Vb(240,"app-inline-code"),c.Bc(241,"lodash"),c.Ub(),c.Bc(242," but for scss. A good example of its usefulness is its "),c.Vb(243,"a",44),c.Bc(244,"ellipsis mixin"),c.Ub(),c.Bc(245," or the more trivial but expressive "),c.Vb(246,"a",45),c.Bc(247,"border-left-radius mixin"),c.Ub(),c.Bc(248,". "),c.Ub(),c.Vb(249,"li"),c.Vb(250,"a",46),c.Bc(251,"Tailwind"),c.Ub(),c.Bc(252,' is, as its developers say, a utility based css library, and the thing is, it\'s how we mostly use Bootstrap anyway. So, to its core, this library is really "styled components" friendly. The downfall is that it is quite '),c.Vb(253,"a",47),c.Bc(254,'hard to use with "vanilla" angular'),c.Ub(),c.Bc(255," for the moment since it uses PostCSS, but with the cli's future developments, this might be easier to integrate at some point. "),c.Ub(),c.Vb(256,"li"),c.Bc(257," Last but definitely not least, "),c.Vb(258,"a",48),c.Bc(259,"Bulma"),c.Ub(),c.Bc(260," is really worth checking out. It's pure (s)css, so no javascript involved and its api is quite straightforward. This might be the most serious competitor of Bootstrap at the moment. "),c.Ub(),c.Ub(),c.Ub()),2&e&&(c.Fb(1),c.lc("lastUpdate",t.lastUpdate),c.Fb(19),c.lc("imgStyle",c.mc(10,R)),c.Fb(33),c.lc("inputs",c.mc(11,z)),c.Fb(40),c.lc("code",t.badImportsScss),c.Fb(9),c.lc("code",t.angularJsonImports),c.Fb(22),c.lc("code",t.angularJsonDarkTheme1),c.Fb(3),c.lc("code",t.darkThemeScripts),c.Fb(5),c.lc("code",t.darkThemeScripts9),c.Fb(27),c.Dc("*","{","box-sizing: border-box;}"),c.Fb(45),c.lc("code",t.bootstrapScss))},directives:[b.a,u.a,h.a,d.a,w.b,w.a,m.a,P.a,D.a,g.a],styles:[""]}),e})()},i.a.features.architecture.component?{path:"components",component:j}:{path:"components",redirectTo:"/page-not-found"},i.a.features.architecture.forms?{path:"forms",component:F}:{path:"forms",redirectTo:"/page-not-found"}]}];let _=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=c.Nb({type:e}),e.\u0275inj=c.Mb({imports:[[s.g.forChild(E)],s.g]}),e})(),N=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=c.Nb({type:e}),e.\u0275inj=c.Mb({imports:[[n.c,_,a.c]]}),e})()}}]);