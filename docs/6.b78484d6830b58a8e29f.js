(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{rqKa:function(e,t,o){"use strict";o.r(t),o.d(t,"NgCoreDocModule",function(){return F});var n=o("SVse"),a=o("EHqz"),c=o("iInd"),r=o("Lozc"),i=o("vli9"),s=o("l5mm"),l=o("JX91"),b=o("lJxs"),p=o("zx2A");class g{constructor(e,t){this.keySelector=e,this.flushes=t}call(e,t){return t.subscribe(new d(e,this.keySelector,this.flushes))}}class d extends p.b{constructor(e,t,o){super(e),this.keySelector=t,this.values=new Set,o&&this.add(Object(p.c)(o,new p.a(this)))}notifyNext(){this.values.clear()}notifyError(e){this._error(e)}_next(e){this.keySelector?this._useKeySelector(e):this._finalizeNext(e,e)}_useKeySelector(e){let t;const{destination:o}=this;try{t=this.keySelector(e)}catch(n){return void o.error(n)}this._finalizeNext(t,e)}_finalizeNext(e,t){const{values:o}=this;o.has(e)||(o.add(e),this.destination.next(t))}}var h=o("zP0r"),u=o("n2+w"),m=o("8Y7J");let f=(()=>{class e{constructor(e){this.coreStateFacade=e}setPages(){this.coreStateFacade.setPages([{label:"OnDestroyMixin",path:"packages/ng-core/on-destroy-mixin"},{label:"Logger",path:"packages/ng-core/logger"}])}discardPages(){this.coreStateFacade.setPages([])}}return e.\u0275fac=function(t){return new(t||e)(m.Zb(u.b))},e.\u0275prov=m.Lb({token:e,factory:e.\u0275fac,providedIn:"root"}),e})();var U=o("s7LF"),y=o("M9ds"),V=o("C+Z4"),v=o("orUY"),B=o("PDjf"),M=o("DpR9"),w=o("3Kc7"),D=o("Q2Ze"),x=o("e6WT"),k=o("Dxy4");function S(e,t){if(1&e){const e=m.Wb();m.Vb(0,"mat-card-actions"),m.Vb(1,"button",15),m.dc("click",function(){return m.rc(e),m.gc().refreshPage()}),m.Bc(2,"REFRESH"),m.Ub(),m.Bc(3," Log level changed, please refresh the page "),m.Ub()}}let O=(()=>{class e{constructor(e,t,o,n){this.logger=e,this.fb=t,this.coreStateFacade=o,this.ngCorePagesService=n,this.code1="\n  // app.module.ts\n  @NgModule(imports: [LoggerModule.forRoot('App')])\n  export class AppModule() {}\n\n  // data.service.ts\n  @Injectable()\n  export class DataService {\n    constructor(private logger: Logger) {\n      this.logger = logger.extend('DataService');\n    }\n\n    get(): void {\n      this.logger.info('getting data');\n    }\n  }\n\n  // app.component.ts\n  @Component(/*...*/)\n  export class AppComponent {\n    constructor(private logger: Logger, private dataService: DataService) {\n      this.logger = logger.extend('AppComponent');\n    }\n\n    ngOnInit() {\n      this.logger.info('initialized');\n      this.dataService.get();\n    }\n  }\n  ",this.code2='\n    {\n      "^[App.*]": "WARN",\n      ".*DataService.*": 0 // DEBUG\n    }',this.logLevelMap$=Object(s.a)(1e3).pipe(Object(l.a)(0),Object(b.a)(()=>JSON.stringify(this.logLevelMap,null,2))),this.logLevelChanged$=this.logLevelMap$.pipe(e=>e.lift(new g(void 0,void 0)),Object(h.a)(1),Object(b.a)(()=>!0)),this.loggerModuleMethods=[{name:"static forRoot(namespace: string): ModuleWithProviders",description:'import for the root of your application, "namespace" will be the namespace of the root Logger.'}],this.loggerMethods=[{name:"debug(...args: unknown[]): void",description:'log input as console.debug(...) if logger\'s log level is >= 0 (DEBUG). Beware that your browser log level should accept "Verbose" level for you to see this kind of message'},{name:"log(...args: unknown[]): void",description:"log input as console.log(...) if logger's log level is >= 1 (LOG)"},{name:"info(...args: unknown[]): void",description:"log input as console.info(...) if logger's log level is >= 2 (INFO)"},{name:"warn(...args: unknown[]): void",description:"log input as console.warn(...) if logger's log level is >= 3 (WARN)"},{name:"error(...args: unknown[]): void",description:"log input as console.error(...) if logger's log level is >= 4 (ERROR)"},{name:"extend(namespace: string): Logger",description:"create a new logger which namespace extends the current one. For example, if the root Logger has a namespace 'App', calling logger.extend('Component') will result in a logger having the namespace 'App:Component'"}],this.logger=e.extend("LoggerDocComponent")}get logLevelMap(){return JSON.parse(localStorage.getItem(this.logger.localStorageKey)||"{}")}ngOnInit(){this.coreStateFacade.setPageTitle("@cognizone/ng-core","Logger"),this.form=this.fb.group({logMessage:["This is my message"]}),this.ngCorePagesService.setPages()}ngOnDestroy(){this.coreStateFacade.resetPageTitle(),this.ngCorePagesService.discardPages()}refreshPage(){location.reload()}}return e.\u0275fac=function(t){return new(t||e)(m.Pb(i.a),m.Pb(U.d),m.Pb(r.a),m.Pb(f))},e.\u0275cmp=m.Jb({type:e,selectors:[["app-logger-doc"]],decls:100,vars:13,consts:[["appMatTabRouted","",3,"dynamicHeight"],["label","OVERVIEW"],[3,"code"],["language","json",3,"code"],["label","API"],[3,"apis"],["label","PLAYGROUND"],[3,"formGroup"],["matInput","","formControlName","logMessage","autocomplete","off"],["mat-button","",3,"click"],["mat-button","","color","primary",3,"click"],["mat-button","","color","accent",3,"click"],["mat-button","","color","warn",3,"click"],["mat-button","","color","error",3,"click"],[4,"ngIf"],["mat-raised-button","","color","error",3,"click"]],template:function(e,t){1&e&&(m.Vb(0,"mat-tab-group",0),m.Vb(1,"mat-tab",1),m.Vb(2,"p"),m.Bc(3," The "),m.Vb(4,"app-inline-code"),m.Bc(5,"Logger"),m.Ub(),m.Bc(6," service has, more or less, the same methods as "),m.Vb(7,"app-inline-code"),m.Bc(8,"Console"),m.Ub(),m.Bc(9,", but comes with a few handy features: "),m.Ub(),m.Vb(10,"ul"),m.Vb(11,"li"),m.Bc(12," Namespace: when you import the "),m.Vb(13,"app-inline-code"),m.Bc(14,"LoggerModule.forRoot('MyNamespace')"),m.Ub(),m.Bc(15,", you define a root namespace for your app, and each component/service/... can inject the base logger and extend it with their own namespace. So you could end up with something like: "),m.Ub(),m.Vb(16,"mat-card"),m.Vb(17,"mat-card-content"),m.Qb(18,"app-code-block",2),m.Ub(),m.Ub(),m.Vb(19,"p"),m.Bc(20," And so you might see "),m.Vb(21,"app-inline-code"),m.Bc(22,"[App:AppComponent] initialized"),m.Ub(),m.Bc(23," and "),m.Vb(24,"app-inline-code"),m.Bc(25,"[App:DataService] getting data"),m.Ub(),m.Bc(26," in the console (depending on your log level) "),m.Ub(),m.Vb(27,"li"),m.Bc(28," Log level: the log level map is stored in local storage and so can be used to debug prod applications if need be. This map's keys serve as regexp to be evaluated against the namespace of the logger when it's created. For example, if we have a log level map like this: "),m.Ub(),m.Qb(29,"app-code-block",3),m.Bc(30," Then the example we had above will only log the message from the "),m.Vb(31,"app-inline-code"),m.Bc(32,"DataService"),m.Ub(),m.Bc(33,", because "),m.Vb(34,"app-inline-code"),m.Bc(35,"DEBUG"),m.Ub(),m.Bc(36," is the lowest log level matching the namespace of the logger. Beware that the log level stored in local storage is only evaluated at "),m.Vb(37,"app-inline-code"),m.Bc(38,"Logger"),m.Ub(),m.Bc(39," creation so if you change its value, you need to refresh your browser to witness the change in the "),m.Vb(40,"app-inline-code"),m.Bc(41,"Logger"),m.Ub(),m.Bc(42,". "),m.Ub(),m.Ub(),m.Vb(43,"mat-tab",4),m.Vb(44,"h2"),m.Bc(45,"API reference for Logger"),m.Ub(),m.Vb(46,"p"),m.Vb(47,"app-inline-code"),m.Bc(48),m.Ub(),m.Ub(),m.Vb(49,"h3"),m.Bc(50,"Modules"),m.Ub(),m.Vb(51,"h4"),m.Bc(52,"LoggerModule"),m.Ub(),m.Vb(53,"mat-card"),m.Vb(54,"mat-card-title"),m.Bc(55,"Methods"),m.Ub(),m.Qb(56,"app-api-table",5),m.Ub(),m.Vb(57,"h3"),m.Bc(58,"Services"),m.Ub(),m.Vb(59,"h4"),m.Bc(60,"Logger"),m.Ub(),m.Vb(61,"mat-card"),m.Vb(62,"mat-card-title"),m.Bc(63,"Methods"),m.Ub(),m.Qb(64,"app-api-table",5),m.Ub(),m.Ub(),m.Vb(65,"mat-tab",6),m.Vb(66,"h2"),m.Bc(67,"Playground"),m.Ub(),m.Vb(68,"mat-card"),m.Vb(69,"mat-card-title"),m.Bc(70,"Inputs"),m.Ub(),m.Vb(71,"mat-card-content"),m.Vb(72,"form",7),m.Vb(73,"mat-form-field"),m.Vb(74,"mat-label"),m.Bc(75,"Log Message"),m.Ub(),m.Qb(76,"input",8),m.Vb(77,"mat-hint"),m.Bc(78,"open your console \ud83d\ude09"),m.Ub(),m.Ub(),m.Ub(),m.Ub(),m.Vb(79,"mat-card-actions"),m.Vb(80,"button",9),m.dc("click",function(){return t.logger.debug(t.form.value.logMessage)}),m.Bc(81,"DEBUG"),m.Ub(),m.Vb(82,"button",10),m.dc("click",function(){return t.logger.log(t.form.value.logMessage)}),m.Bc(83,"LOG"),m.Ub(),m.Vb(84,"button",11),m.dc("click",function(){return t.logger.info(t.form.value.logMessage)}),m.Bc(85,"INFO"),m.Ub(),m.Vb(86,"button",12),m.dc("click",function(){return t.logger.warn(t.form.value.logMessage)}),m.Bc(87,"WARN"),m.Ub(),m.Vb(88,"button",13),m.dc("click",function(){return t.logger.error(t.form.value.logMessage)}),m.Bc(89,"ERROR"),m.Ub(),m.Ub(),m.Ub(),m.Vb(90,"mat-card"),m.Vb(91,"mat-card-title"),m.Bc(92,"Current log level in local storage"),m.Ub(),m.Vb(93,"mat-card-subtitle"),m.Bc(94,"If you change it, you have to refresh the page"),m.Ub(),m.Vb(95,"mat-card-content"),m.Qb(96,"app-code-block",3),m.hc(97,"async"),m.Ub(),m.zc(98,S,4,0,"mat-card-actions",14),m.hc(99,"async"),m.Ub(),m.Ub(),m.Ub()),2&e&&(m.lc("dynamicHeight",!0),m.Fb(18),m.lc("code",t.code1),m.Fb(11),m.lc("code",t.code2),m.Fb(19),m.Cc("import { LoggerModule } from '@cognizone/ng-core';"),m.Fb(8),m.lc("apis",t.loggerModuleMethods),m.Fb(8),m.lc("apis",t.loggerMethods),m.Fb(8),m.lc("formGroup",t.form),m.Fb(24),m.lc("code",m.ic(97,9,t.logLevelMap$)),m.Fb(2),m.lc("ngIf",m.ic(99,11,t.logLevelChanged$)))},directives:[y.b,V.a,y.a,v.a,B.a,B.c,M.a,B.h,w.a,U.r,U.n,U.h,D.c,D.g,x.a,U.c,U.m,U.g,D.f,B.b,k.b,B.g,n.l],pipes:[n.b],styles:[""]}),e})();const P=[{path:"",redirectTo:"on-destroy-mixin"},{path:"on-destroy-mixin",component:(()=>{class e{constructor(e,t){this.coreStateFacade=e,this.ngCorePagesService=t,this.code1="\n  @Component(/*...*/)\n  export class MyComponent extends OnDestroyMixin(MyParentComponent) { \n    constructor(private store: MyStore) {\n      super();\n      store.getData().pipe(takeUntil(this.onDestroy$)).subscribe(/* do stuff */); \n    } \n  }\n  ",this.code2="\n  @Component(/*...*/)\n  export class MyComponent extends OnDestroyMixin(MyParentComponent) { \n    constructor(private store: MyStore) {\n      super();\n      store.getData().pipe(this.untilDestroyed()).subscribe(/* do stuff */); \n    } \n  }\n  ",this.code3="\n  @Component(/*...*/)\n  export class MyComponent extends OnDestroy$ { \n    constructor(private store: MyStore) {\n      super();\n      store.getData().pipe(this.firstUntilDestroyed()).subscribe(/* do stuff */); \n    } \n  }\n  ",this.onDestroyMixinProperties=[{name:"onDestroy$: Observable<void>",description:"Observable that is fired when ngOnDestroy() si called"}],this.onDestroyMixinMethods=[{name:"untilDestroyed<U>(): MonoTypeOperatorFunction<U>",description:"Wrapper for takeUntil(this.onDestroy$)"},{name:"firstUntilDestroyed<U>(): MonoTypeOperatorFunction<U>",description:"Wrapper for pipe(first(), this.untilDestroyed())"}]}ngOnInit(){this.coreStateFacade.setPageTitle("@cognizone/ng-core","OnDestroyMixin"),this.ngCorePagesService.setPages()}ngOnDestroy(){this.coreStateFacade.resetPageTitle(),this.ngCorePagesService.discardPages()}}return e.\u0275fac=function(t){return new(t||e)(m.Pb(u.b),m.Pb(f))},e.\u0275cmp=m.Jb({type:e,selectors:[["app-on-destroy-mixin-doc"]],decls:74,vars:8,consts:[["appMatTabRouted","",3,"dynamicHeight"],["label","OVERVIEW"],[3,"code"],["label","API"],[3,"apis"]],template:function(e,t){1&e&&(m.Vb(0,"mat-tab-group",0),m.Vb(1,"mat-tab",1),m.Vb(2,"p"),m.Vb(3,"app-inline-code"),m.Bc(4,"OnDestroyMixin()"),m.Ub(),m.Bc(5," provides an easy to use observable that is fired at component/directive/pipe destruction. The most direct use case for this is to use it in a "),m.Vb(6,"app-inline-code"),m.Bc(7,"takeUntil()"),m.Ub(),m.Bc(8," close like below. "),m.Ub(),m.Vb(9,"mat-card"),m.Vb(10,"mat-card-content"),m.Qb(11,"app-code-block",2),m.Ub(),m.Ub(),m.Vb(12,"p"),m.Bc(13," Since it is the most common use case, "),m.Vb(14,"app-inline-code"),m.Bc(15,"OnDestroyMixin()"),m.Ub(),m.Bc(16," comes with a helper method called "),m.Vb(17,"app-inline-code"),m.Bc(18,"untilDestroyed()"),m.Ub(),m.Bc(19," which is just a wrapper for "),m.Vb(20,"app-inline-code"),m.Bc(21,"takeUntil(this.onDestroy$)"),m.Ub(),m.Ub(),m.Vb(22,"mat-card"),m.Vb(23,"mat-card-content"),m.Qb(24,"app-code-block",2),m.Ub(),m.Ub(),m.Vb(25,"p"),m.Bc(26,"There are 2 more helpers that can be quite useful:"),m.Ub(),m.Vb(27,"ul"),m.Vb(28,"li"),m.Bc(29," The "),m.Vb(30,"app-inline-code"),m.Bc(31,"firstUntilDestroyed()"),m.Ub(),m.Bc(32," method which provides a combination of "),m.Vb(33,"app-inline-code"),m.Bc(34,"first()"),m.Ub(),m.Bc(35," and "),m.Vb(36,"app-inline-code"),m.Bc(37,"untilDestroyed()"),m.Ub(),m.Ub(),m.Vb(38,"li"),m.Bc(39," The "),m.Vb(40,"app-inline-code"),m.Bc(41,"OnDestroy$"),m.Ub(),m.Bc(42," class that is just a quick wrapper for "),m.Vb(43,"app-inline-code"),m.Bc(44),m.Ub(),m.Ub(),m.Ub(),m.Vb(45,"p"),m.Bc(46,"With all this, the code of a component could be as simple as"),m.Ub(),m.Vb(47,"mat-card"),m.Vb(48,"mat-card-content"),m.Qb(49,"app-code-block",2),m.Ub(),m.Ub(),m.Ub(),m.Vb(50,"mat-tab",3),m.Vb(51,"h2"),m.Bc(52,"API reference for OnDestroyMixin"),m.Ub(),m.Vb(53,"h3"),m.Bc(54,"Mixins"),m.Ub(),m.Vb(55,"h4"),m.Bc(56,"OnDestroyMixin"),m.Ub(),m.Vb(57,"mat-card"),m.Vb(58,"mat-card-title"),m.Bc(59,"Properties"),m.Ub(),m.Qb(60,"app-api-table",4),m.Ub(),m.Vb(61,"mat-card"),m.Vb(62,"mat-card-title"),m.Bc(63,"Methods"),m.Ub(),m.Qb(64,"app-api-table",4),m.Ub(),m.Vb(65,"h3"),m.Bc(66,"Classes"),m.Ub(),m.Vb(67,"h4"),m.Bc(68,"OnDestroy$"),m.Ub(),m.Vb(69,"p"),m.Bc(70," Just a wrapper for "),m.Vb(71,"app-inline-code"),m.Bc(72),m.Ub(),m.Bc(73,", see the mixin above for more details "),m.Ub(),m.Ub(),m.Ub()),2&e&&(m.lc("dynamicHeight",!0),m.Fb(11),m.lc("code",t.code1),m.Fb(13),m.lc("code",t.code2),m.Fb(20),m.Dc("OnDestroyMixin(class","{","})"),m.Fb(5),m.lc("code",t.code3),m.Fb(11),m.lc("apis",t.onDestroyMixinProperties),m.Fb(4),m.lc("apis",t.onDestroyMixinMethods),m.Fb(8),m.Dc("OnDestroyMixin(class","{","})"))},directives:[y.b,V.a,y.a,v.a,B.a,B.c,M.a,B.h,w.a],styles:[""]}),e})()},{path:"logger",component:O}];let L=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=m.Nb({type:e}),e.\u0275inj=m.Mb({imports:[[c.g.forChild(P)],c.g]}),e})(),F=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=m.Nb({type:e}),e.\u0275inj=m.Mb({imports:[[n.c,L,a.c]]}),e})()}}]);