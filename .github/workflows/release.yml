name: release

on:
  push:
    branches: [main, beta]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.15.x
      - name: Git checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Git set user
        run: |
          git config --local user.email "WilliamChelman@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      - name: Cache node modules global
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package-lock.json') }}
      - name: Cache node modules local
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules-local
        with:
          path: ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package-lock.json') }}
      - run: npm i
      # at some point https://github.com/nrwl/last-successful-commit-action to release only affected
      # - run: npm run affected:lint -- --base=origin/main
      # - run: npm run nx -- run workspace:version --version=prerelease --preid=alpha
      # should be simpler, but model-utils, ng-core and ng-yasgui seem to ignor prod tsconfig in that case
      # npm run nx -- run-many --target=build --configuration=production
      - run: |
          npm run nx -- run devtools:build:production --skip-nx-cache
          npm run nx -- run model-utils:build:production --skip-nx-cache
          npm run nx -- run ng-core:build:production --skip-nx-cache
          npm run nx -- run ng-yasgui:build:production --skip-nx-cache
          npm run nx -- run application-profile:build:production --skip-nx-cache
          npm run nx -- run i18n:build:production --skip-nx-cache
          npm run nx -- run transloco-langstring:build:production --skip-nx-cache
          npm run nx -- run json-model:build:production --skip-nx-cache
          npm run nx -- run material-icons:build:production --skip-nx-cache
          npm run nx -- run operation:build:production --skip-nx-cache
          npm run nx -- run permissions:build:production --skip-nx-cache
          npm run nx -- run i18n-transloco:build:production --skip-nx-cache
          npm run nx -- run legi-cv:build:production --skip-nx-cache
          npm run nx -- run ng-application-profile:build:production --skip-nx-cache
          npm run nx -- run elastic:build:production --skip-nx-cache
          npm run nx -- run json-model-graph:build:production --skip-nx-cache
          npm run nx -- run legi-shared:build:production --skip-nx-cache
          npm run nx -- run elastic-explorer:build:production --skip-nx-cache
          npm run nx -- run user-action:build:production --skip-nx-cache
          npm run nx -- run elastic-explorer-chrome-extension:build:production --skip-nx-cache
          npm run nx -- run docs-app:build:production --skip-nx-cache
          npm run nx -- run workspace:build --skip-nx-cache
          npm run nx -- run prettier-config:build --skip-nx-cache
          npm run nx -- run tslint-config:build --skip-nx-cache
          npm run nx -- run eslint-config:build  --skip-nx-cache
          npm run nx -- run legi-styles:build  --skip-nx-cache
      - run: npm run nx -- run-many --target=test
      # TODO check to bring it back
      # - name: 'Build cli'
      #   run: |
      #     cd ./other-libs/cli
      #     npm i
      #     npm run build
      - run: node ./tools/sync-package-metadata.js
      - run: npx semantic-release
        # - run: node ./tools/npm-publish.js
        env:
          NPM_TOKEN: ${{secrets.NPM_TOKEN}}
      # - run: npm run affected:e2e -- --headless --base=origin/main
      # - run: git push --follow-tags
